{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sungs\\\\Deact\\\\frontend\\\\frontend\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport NavBar from \"./components/routing/Nav\";\nimport Routes from \"./Routes\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.userHasAuthenticated = (authenticated, username, token) => {\n      this.setState({\n        isAuthenticated: authenticated,\n        username: username\n      });\n      localStorage.setItem('token', token);\n    };\n\n    this.handleLogout = () => {\n      // 이 부분 이슈 잡아야 하는데, 사실 f5 리프레쉬 됐을때 구글 로그인 로직이 자동 호출되는 것만 막으면 됨\n      // Login.js -> handleGoogleSignIn() 함수\n      try {\n        window.gapi && window.gapi.auth2.getAuthInstance().signOut().then(() => {\n          this.setState({\n            isAuthenticated: false,\n            username: ''\n          });\n          localStorage.removeItem('token');\n          console.log('Logged out successfully');\n        });\n      } catch {\n        this.setState({\n          isAuthenticated: false,\n          username: ''\n        });\n        localStorage.removeItem('token');\n        console.log('Logged out successfully');\n      }\n    };\n\n    this.state = {\n      username: null,\n      isAuthenticated: localStorage.getItem('token') ? true : false\n    };\n  } // user가 로그인 중인지 확인하고, 로그인 중이라면 유저의 정보를 서버로부터 받아온다.\n\n\n  componentDidMount() {\n    // 토큰(access token)이 이미 존재하는 상황이라면 서버에 GET /validate 요청하여 해당 access token이 유효한지 확인\n    if (this.state.isAuthenticated) {\n      let handleErrors = response => {\n        if (!response.ok) {\n          throw Error(response.statusText);\n        }\n\n        return response;\n      }; // 현재 JWT 토큰 값이 타당한지 GET /validate 요청을 통해 확인하고\n      // 상태 코드가 200이라면 현재 GET /user/current 요청을 통해 user정보를 받아옴\n\n\n      fetch('http://localhost:8000/validate/', {\n        headers: {\n          Authorization: `JWT ${localStorage.getItem('token')}`\n        }\n      }).then(res => {\n        fetch('http://localhost:8000/user/current', {\n          headers: {\n            Authorization: `JWT ${localStorage.getItem('token')}`\n          }\n        }).then(handleErrors).then(res => res.json()).then(json => {\n          // 현재 유저 정보 받아왔다면, 로그인 상태로 state 업데이트 하고\n          if (json.username) {\n            this.setState({\n              username: json.username\n            });\n          } // Refresh Token 발급 받아 token의 만료 시간 연장\n\n\n          fetch('http://localhost:8000/refresh/', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              token: localStorage.getItem('token')\n            })\n          }).then(handleErrors).then(res => res.json()).then(json => {\n            this.userHasAuthenticated(true, json.user.username, json.token);\n            console.log('Refresh Token 발급');\n            console.log(json.token);\n          }).catch(error => {\n            console.log(error);\n          });\n          ;\n        }).catch(error => {\n          this.handleLogout();\n        });\n      }).catch(error => {\n        this.handleLogout();\n      });\n    }\n  } // 새로운 User가 로그인 했다면 (서버로 부터 access token을 발급받았을 것이고) 해당 토큰을 localStorage에 저장\n\n\n  render() {\n    const childProps = {\n      username: this.state.username,\n      isAuthenticated: this.state.isAuthenticated,\n      userHasAuthenticated: this.userHasAuthenticated\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(NavBar, {\n      isAuthenticated: this.state.isAuthenticated,\n      username: this.state.username,\n      handleLogout: this.handleLogout,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Routes, {\n      childProps: childProps,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/sungs/Deact/frontend/frontend/src/App.js"],"names":["React","Component","NavBar","Routes","App","constructor","props","userHasAuthenticated","authenticated","username","token","setState","isAuthenticated","localStorage","setItem","handleLogout","window","gapi","auth2","getAuthInstance","signOut","then","removeItem","console","log","state","getItem","componentDidMount","handleErrors","response","ok","Error","statusText","fetch","headers","Authorization","res","json","method","body","JSON","stringify","user","catch","error","render","childProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport NavBar from \"./components/routing/Nav\";\nimport Routes from \"./Routes\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      username: null,\n      isAuthenticated: localStorage.getItem('token') ? true : false\n    };\n  }\n\n  // user가 로그인 중인지 확인하고, 로그인 중이라면 유저의 정보를 서버로부터 받아온다.\n  componentDidMount() {\n\n    // 토큰(access token)이 이미 존재하는 상황이라면 서버에 GET /validate 요청하여 해당 access token이 유효한지 확인\n    if (this.state.isAuthenticated) {\n\n      let handleErrors = response => {\n        if (!response.ok) {\n          throw Error(response.statusText);\n        }\n        return response;\n      }\n\n\n      // 현재 JWT 토큰 값이 타당한지 GET /validate 요청을 통해 확인하고\n      // 상태 코드가 200이라면 현재 GET /user/current 요청을 통해 user정보를 받아옴\n      fetch('http://localhost:8000/validate/', {\n        headers: {\n          Authorization: `JWT ${localStorage.getItem('token')}`\n        }\n      })\n      .then(res => {\n      \n        fetch('http://localhost:8000/user/current', {\n          headers: {\n            Authorization: `JWT ${localStorage.getItem('token')}`\n          }\n        })\n        .then(handleErrors)\n        .then(res => res.json())\n        .then(json => {\n          // 현재 유저 정보 받아왔다면, 로그인 상태로 state 업데이트 하고\n          if (json.username) {\n            this.setState({ username: json.username });\n          }\n\n          // Refresh Token 발급 받아 token의 만료 시간 연장\n          fetch('http://localhost:8000/refresh/', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              token: localStorage.getItem('token')\n            })\n          })\n          .then(handleErrors)\n          .then(res => res.json())\n          .then((json)=>{\n\n            this.userHasAuthenticated(true, json.user.username, json.token);\n            \n            console.log('Refresh Token 발급');\n            console.log(json.token);\n          })\n          .catch(error => {\n\n            console.log(error);\n  \n          });\n          ;\n\n\n        })\n        .catch(error => {\n\n          this.handleLogout();\n\n        });\n      })\n      .catch(error => {\n        \n        this.handleLogout();\n        \n      });\n      \n      \n    }\n  }\n\n  // 새로운 User가 로그인 했다면 (서버로 부터 access token을 발급받았을 것이고) 해당 토큰을 localStorage에 저장\n  userHasAuthenticated = (authenticated, username, token) => {\n    this.setState({\n      isAuthenticated: authenticated,\n      username: username\n    });\n    localStorage.setItem('token', token);\n  }\n\n  // 로그인 상태였던 유저가 로그아웃을 시도한다면 토큰을 지움\n  handleLogout = () => {\n  \n    // 이 부분 이슈 잡아야 하는데, 사실 f5 리프레쉬 됐을때 구글 로그인 로직이 자동 호출되는 것만 막으면 됨\n    // Login.js -> handleGoogleSignIn() 함수\n    try {\n      \n      window.gapi && window.gapi.auth2.getAuthInstance().signOut()\n        .then( () => {\n\n          this.setState({\n            isAuthenticated: false,\n            username: ''\n          });\n          localStorage.removeItem('token');\n          console.log('Logged out successfully');  \n\n        });\n    }catch{\n\n      this.setState({\n        isAuthenticated: false,\n        username: ''\n      });\n      localStorage.removeItem('token');\n      console.log('Logged out successfully');  \n\n    }\n    \n    \n\n\n\n  }\n\n  render() {\n    const childProps = {\n      username: this.state.username,\n      isAuthenticated: this.state.isAuthenticated,\n      userHasAuthenticated: this.userHasAuthenticated\n    };\n    return (\n      <div className=\"App\">\n        <NavBar\n          isAuthenticated={this.state.isAuthenticated}\n          username={this.state.username}\n          handleLogout={this.handleLogout}\n        />\n        <Routes childProps={childProps}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
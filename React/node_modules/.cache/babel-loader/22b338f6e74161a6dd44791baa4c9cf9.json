{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sungs\\\\Deact\\\\frontend\\\\frontend\\\\src\\\\containers\\\\Login.js\";\nimport React, { Component, Fragment } from \"react\";\nimport LoginForm from \"../components/auth/LoginForm\"; // 로그인 로직을 수행하는 컴포넌트\n\nexport default class Login extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.id]: event.target.value\n      });\n    };\n\n    this.state = {\n      username: \"\",\n      password: \"\"\n    };\n  } // 만약 유저가 이미 로그인된 상태라면 home으로 이동\n\n\n  componentDidMount() {\n    if (this.props.isAuthenticated) {\n      this.props.history.push(\"/\");\n    }\n  }\n\n  validateForm(username, password) {\n    return username && username.length > 0 && password && password.length > 0;\n  }\n\n  // 구글 로그인 버튼을 클릭한 경우 로직\n  // 처음 로그인을 시도하는 경우라면 구글 리소스 서버로부터 받은 정보를 이용하여 서버에 User 생성하고 로그인\n  // 이미 로그인을 시도한 적 있는 경우라면 서버로부터 해당 정보를 받아와 로그인\n  handleGoogleSignIn(googleUser) {\n    let profile = googleUser.getBasicProfile();\n    let username = profile.getName();\n    let email = profile.getEmail();\n    let id_token = profile.getId();\n    let firstname = profile.getGivenName();\n    let lastname = profile.getFamilyName(); // let access_token = googleUser.getAuthResponse().id_token;\n    // console.log('username: ' + username);\n    // console.log('email: ' + email);\n    // console.log('id_token: ' + id_token);\n    // console.log('access_token: ' + access_token);\n    // console.log('Given Name: ' + profile.getGivenName());\n    // console.log('Family Name: ' + profile.getFamilyName());\n\n    let data = {\n      username: username,\n      first_name: firstname,\n      last_name: lastname,\n      email: email,\n      password: id_token,\n      provider: 'google'\n    }; // 서버에 Google 계정 저장돼 있지 않다면 Create 작업 수행\n\n    fetch('http://localhost:8000/user/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    }).then(res => res.json()).then(json => {\n      if (json.username && json.token) {\n        // console.log('token: ' + json.token);\n        this.props.userHasAuthenticated(true, json.username, json.token);\n        this.props.history.push(\"/\");\n      } else {\n        // 서버에 Google 계정 이미 저장돼 있다면 Login 작업 수행\n        // 로그인을 시도하기 전에 서버에 접근하기 위한 access token을 발급 받음\n        fetch('http://localhost:8000/login/', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(data)\n        }).then(res => res.json()).then(json => {\n          // 발급 완료 되었다면 해당 토큰을 클라이언트 Local Storage에 저장\n          if (json.user && json.user.username && json.token) {\n            // console.log('token: ' + json.token);\n            this.props.userHasAuthenticated(true, json.user.username, json.token);\n            this.props.history.push(\"/\");\n          }\n        }).catch(error => {\n          console.log(error);\n          window.gapi && window.gapi.auth2.getAuthInstance().signOut();\n        });\n      }\n    }).catch(error => {\n      console.log(error);\n      window.gapi && window.gapi.auth2.getAuthInstance().signOut();\n    });\n  } // 서버에 등록되어있는 회원 정보로 로그인을 시도하는 경우\n\n\n  handleSubmit(submitEvent) {\n    let data = {\n      username: this.state.username,\n      password: this.state.password\n    };\n    submitEvent.preventDefault();\n\n    let handleErrors = response => {\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n\n      return response;\n    }; // 서버로부터 새로운 access token 발급받음\n\n\n    fetch('http://localhost:8000/login/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    }).then(handleErrors).then(res => res.json()).then(json => {\n      // 발급 완료 되었다면 해당 토큰을 클라이언트 Local Storage에 저장\n      if (json.user && json.user.username && json.token) {\n        this.props.userHasAuthenticated(true, json.user.username, json.token);\n        this.props.history.push(\"/\");\n      }\n    }).catch(error => alert(error));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(LoginForm, {\n      username: this.state.username,\n      password: this.state.password,\n      handleChangeUsername: e => this.handleChange(e),\n      handleChangePassword: e => this.handleChange(e),\n      handleSubmit: e => this.handleSubmit(e),\n      handleGoogleSignIn: e => this.handleGoogleSignIn(e),\n      validate: this.validateForm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/sungs/Deact/frontend/frontend/src/containers/Login.js"],"names":["React","Component","Fragment","LoginForm","Login","constructor","props","handleChange","event","setState","target","id","value","state","username","password","componentDidMount","isAuthenticated","history","push","validateForm","length","handleGoogleSignIn","googleUser","profile","getBasicProfile","getName","email","getEmail","id_token","getId","firstname","getGivenName","lastname","getFamilyName","data","first_name","last_name","provider","fetch","method","headers","body","JSON","stringify","then","res","json","token","userHasAuthenticated","user","catch","error","console","log","window","gapi","auth2","getAuthInstance","signOut","handleSubmit","submitEvent","preventDefault","handleErrors","response","ok","Error","statusText","alert","render","e"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport LoginForm from \"../components/auth/LoginForm\";\n\n// 로그인 로직을 수행하는 컴포넌트\nexport default class Login extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      username: \"\",\n      password: \"\"\n    };\n  }\n\n  // 만약 유저가 이미 로그인된 상태라면 home으로 이동\n  componentDidMount() {\n    if (this.props.isAuthenticated) {\n      this.props.history.push(\"/\");\n    }\n  }\n\n  validateForm(username, password) {\n    return (username && username.length > 0) && (password && password.length > 0);\n  }\n\n  handleChange = event => {\n    this.setState({\n      [event.target.id]: event.target.value\n    });\n  }\n\n  // 구글 로그인 버튼을 클릭한 경우 로직\n  // 처음 로그인을 시도하는 경우라면 구글 리소스 서버로부터 받은 정보를 이용하여 서버에 User 생성하고 로그인\n  // 이미 로그인을 시도한 적 있는 경우라면 서버로부터 해당 정보를 받아와 로그인\n  handleGoogleSignIn(googleUser) {\n    \n    let profile = googleUser.getBasicProfile();\n\n    let username = profile.getName();\n    let email = profile.getEmail();\n    let id_token = profile.getId();\n    let firstname = profile.getGivenName()\n    let lastname = profile.getFamilyName()\n\n    // let access_token = googleUser.getAuthResponse().id_token;\n    \n    // console.log('username: ' + username);\n    // console.log('email: ' + email);\n    // console.log('id_token: ' + id_token);\n    // console.log('access_token: ' + access_token);\n    // console.log('Given Name: ' + profile.getGivenName());\n    // console.log('Family Name: ' + profile.getFamilyName());\n\n    let data = {\n      username: username,\n      first_name: firstname,\n      last_name: lastname,\n      email: email,\n      password: id_token,\n      provider: 'google'\n    };\n\n    // 서버에 Google 계정 저장돼 있지 않다면 Create 작업 수행\n    fetch('http://localhost:8000/user/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    })\n    .then(res => res.json())\n    .then(json => {\n      \n      if (json.username && json.token) {\n\n        // console.log('token: ' + json.token);\n\n        this.props.userHasAuthenticated(true, json.username, json.token);\n        this.props.history.push(\"/\");\n\n      }else{\n\n        // 서버에 Google 계정 이미 저장돼 있다면 Login 작업 수행\n        // 로그인을 시도하기 전에 서버에 접근하기 위한 access token을 발급 받음\n        fetch('http://localhost:8000/login/', {  \n        method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(data)\n        })\n        .then(res => res.json())\n        .then(json => {\n\n          // 발급 완료 되었다면 해당 토큰을 클라이언트 Local Storage에 저장\n          if (json.user && json.user.username && json.token) {\n\n            // console.log('token: ' + json.token);\n        \n            this.props.userHasAuthenticated(true, json.user.username, json.token);\n            this.props.history.push(\"/\");\n\n          }\n        })\n        .catch(error => {\n          console.log(error);\n          window.gapi && window.gapi.auth2.getAuthInstance().signOut();\n        });   \n\n      }\n\n    })\n    .catch(error => {\n      console.log(error);\n      window.gapi && window.gapi.auth2.getAuthInstance().signOut();\n    });  \n\n    \n  }\n\n  // 서버에 등록되어있는 회원 정보로 로그인을 시도하는 경우\n  handleSubmit(submitEvent) {\n\n    let data = {\n      username: this.state.username,\n      password: this.state.password\n    };\n\n    submitEvent.preventDefault();\n    \n    let handleErrors = response => {\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n      return response;\n    }\n\n    // 서버로부터 새로운 access token 발급받음\n    fetch('http://localhost:8000/login/', {  \n      method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      })\n    .then(handleErrors)\n    .then(res => res.json())\n    .then(json => {\n      // 발급 완료 되었다면 해당 토큰을 클라이언트 Local Storage에 저장\n      if (json.user && json.user.username && json.token) {\n        this.props.userHasAuthenticated(true, json.user.username, json.token);\n        this.props.history.push(\"/\");\n      }\n    })\n    .catch(error => alert(error));\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <LoginForm\n          username={this.state.username}\n          password={this.state.password}\n          handleChangeUsername={e => this.handleChange(e)}\n          handleChangePassword={e => this.handleChange(e)}\n          handleSubmit={e => this.handleSubmit(e)}\n          handleGoogleSignIn={e => this.handleGoogleSignIn(e)}\n          validate={this.validateForm}\n        />\n\n      </Fragment>\n\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
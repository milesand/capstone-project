{"ast":null,"code":"import _defineProperty from \"/home/hong/capstone-project/React/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/hong/capstone-project/React/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/hong/capstone-project/React/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/hong/capstone-project/React/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/hong/capstone-project/React/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/hong/capstone-project/React/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/hong/capstone-project/React/src/containers/Login.js\";\nimport React, { Component, Fragment } from \"react\";\nimport LoginForm from \"../components/auth/LoginForm\"; // 로그인 로직을 수행하는 컴포넌트\n\nvar Login =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Login, _Component);\n\n  //export default : 다른 모듈에서 이 모듈을 import할 때 내보낼 대표 값\n  function Login(props) {\n    var _this;\n\n    _classCallCheck(this, Login);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Login).call(this, props));\n\n    _this.handleChange = function (event) {\n      _this.setState(_defineProperty({}, event.target.id, event.target.value));\n    };\n\n    _this.state = {\n      username: \"\",\n      password: \"\"\n    };\n    return _this;\n  } // 만약 유저가 이미 로그인된 상태라면 home으로 이동\n\n\n  _createClass(Login, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.isAuthenticated) {\n        this.props.history.push(\"/\");\n      }\n    }\n  }, {\n    key: \"validateForm\",\n    value: function validateForm(username, password) {\n      return username && username.length > 0 && password && password.length > 0;\n    }\n  }, {\n    key: \"handleGoogleSignIn\",\n    // 구글 로그인 버튼을 클릭한 경우 로직\n    // 처음 로그인을 시도하는 경우라면 구글 리소스 서버로부터 받은 정보를 이용하여 서버에 User 생성하고 로그인\n    // 이미 로그인을 시도한 적 있는 경우라면 서버로부터 해당 정보를 받아와 로그인\n    value: function handleGoogleSignIn(googleUser) {\n      var _this2 = this;\n\n      var profile = googleUser.getBasicProfile();\n      var username = profile.getName();\n      var email = profile.getEmail();\n      var id_token = profile.getId();\n      var access_token = googleUser.getAuthResponse().id_token;\n      console.log('username: ' + username);\n      console.log('email: ' + email);\n      console.log('id_token: ' + id_token);\n      console.log('access_token: ' + access_token);\n      var data = {\n        username: username,\n        email: email,\n        password: id_token,\n        social_auth: 'google'\n      };\n      console.log(\"data : \" + JSON.stringify(data)); // 서버에 Google 계정 저장돼 있지 않다면 Create 작업 수행\n\n      fetch('http://localhost/api/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      }).then(function (res) {\n        return res.json();\n      }).then(function (json) {\n        if (json.username && json.token) {\n          console.log('token: ' + json.token);\n\n          _this2.props.userHasAuthenticated(true, json.username, json.token);\n\n          _this2.props.history.push(\"/\");\n        } else {\n          // 서버에 Google 계정 이미 저장돼 있다면 Login 작업 수행\n          // 로그인을 시도하기 전에 서버에 접근하기 위한 access token을 발급 받음\n          fetch('http://localhost:8000/api/jwt-login', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              username: username,\n              password: id_token\n            })\n          }).then(function (res) {\n            return res.json();\n          }).then(function (json) {\n            console.log(Object.keys(json)); // 발급 완료 되었다면 해당 토큰을 클라이언트 Local Storage에 저장\n\n            if (json.id && json.token) {\n              console.log('로그인 성공! token: ' + json.token);\n\n              _this2.props.userHasAuthenticated(true, json.user.id, json.token);\n\n              _this2.props.history.push(\"/\");\n            }\n          }).catch(function (error) {\n            console.log(error);\n            window.gapi && window.gapi.auth2.getAuthInstance().signOut();\n          });\n        }\n      }).catch(function (error) {\n        console.log(error);\n        window.gapi && window.gapi.auth2.getAuthInstance().signOut();\n      });\n    } // 서버에 등록되어있는 회원 정보로 로그인을 시도하는 경우\n\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(submitEvent) {\n      var _this3 = this;\n\n      var data = {\n        //let은 var를 대체하는 블락변수이다.\n        username: this.state.username,\n        password: this.state.password\n      };\n      submitEvent.preventDefault();\n\n      var handleErrors = function handleErrors(response) {\n        if (!response.ok) {\n          console.log(\"에러!!\");\n          console.log(response);\n          throw Error('response.statusText');\n        }\n\n        return response;\n      }; // 서버로부터 새로운 access token 발급받음\n\n\n      fetch('http://localhost:8000/api/jwt-login', {\n        //서버에 올릴 때 :8000 지워야합니다.\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      }).then(handleErrors).then(function (res) {\n        return res.json();\n      }).then(function (json) {\n        // 발급 완료 되었다면 해당 토큰을 클라이언트 Local Storage에 저장\n        console.log(\"로그인 성공!\");\n\n        if (json.user && json.user.username && json.token) {\n          _this3.props.userHasAuthenticated(true, json.user.username, json.token);\n\n          _this3.props.history.push(\"/\");\n        }\n      }).catch(function (error) {\n        return alert(error);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, React.createElement(LoginForm, {\n        username: this.state.username,\n        password: this.state.password,\n        handleChangeUsername: function handleChangeUsername(e) {\n          return _this4.handleChange(e);\n        },\n        handleChangePassword: function handleChangePassword(e) {\n          return _this4.handleChange(e);\n        },\n        handleSubmit: function handleSubmit(e) {\n          return _this4.handleSubmit(e);\n        },\n        handleGoogleSignIn: function handleGoogleSignIn(e) {\n          return _this4.handleGoogleSignIn(e);\n        },\n        validate: this.validateForm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Login;\n}(Component);\n\nexport { Login as default };","map":{"version":3,"sources":["/home/hong/capstone-project/React/src/containers/Login.js"],"names":["React","Component","Fragment","LoginForm","Login","props","handleChange","event","setState","target","id","value","state","username","password","isAuthenticated","history","push","length","googleUser","profile","getBasicProfile","getName","email","getEmail","id_token","getId","access_token","getAuthResponse","console","log","data","social_auth","JSON","stringify","fetch","method","headers","body","then","res","json","token","userHasAuthenticated","Object","keys","user","catch","error","window","gapi","auth2","getAuthInstance","signOut","submitEvent","preventDefault","handleErrors","response","ok","Error","alert","e","handleSubmit","handleGoogleSignIn","validateForm"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport LoginForm from \"../components/auth/LoginForm\";\n\n// 로그인 로직을 수행하는 컴포넌트\nexport default class Login extends Component { //export default : 다른 모듈에서 이 모듈을 import할 때 내보낼 대표 값\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      username: \"\",\n      password: \"\"\n    };\n  }\n\n  // 만약 유저가 이미 로그인된 상태라면 home으로 이동\n  componentDidMount() {\n    if (this.props.isAuthenticated) {\n      this.props.history.push(\"/\");\n    }\n  }\n\n  validateForm(username, password) {\n    return (username && username.length > 0) && (password && password.length > 0);\n  }\n\n  handleChange = event => {\n    this.setState({\n      [event.target.id]: event.target.value\n    });\n  }\n\n  // 구글 로그인 버튼을 클릭한 경우 로직\n  // 처음 로그인을 시도하는 경우라면 구글 리소스 서버로부터 받은 정보를 이용하여 서버에 User 생성하고 로그인\n  // 이미 로그인을 시도한 적 있는 경우라면 서버로부터 해당 정보를 받아와 로그인\n  handleGoogleSignIn(googleUser) {\n    let profile = googleUser.getBasicProfile();\n\n    let username = profile.getName();\n    let email = profile.getEmail();\n    let id_token = profile.getId();\n\n    let access_token = googleUser.getAuthResponse().id_token;\n\n    console.log('username: ' + username);\n    console.log('email: ' + email);\n    console.log('id_token: ' + id_token);\n    console.log('access_token: ' + access_token);\n\n    let data = {\n      username: username,\n      email: email,\n      password: id_token,\n      social_auth: 'google'\n    };\n\n    console.log(\"data : \" + JSON.stringify(data));\n    // 서버에 Google 계정 저장돼 있지 않다면 Create 작업 수행\n    fetch('http://localhost/api/register', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    })\n    .then(res => res.json())\n    .then(json => {\n      if (json.username && json.token) {\n        console.log('token: ' + json.token);\n\n        this.props.userHasAuthenticated(true, json.username, json.token);\n        this.props.history.push(\"/\");\n\n      }else{\n        // 서버에 Google 계정 이미 저장돼 있다면 Login 작업 수행\n        // 로그인을 시도하기 전에 서버에 접근하기 위한 access token을 발급 받음\n        fetch('http://localhost:8000/api/jwt-login', {\n        method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({username: username, password: id_token})\n        })\n        .then(res => res.json())\n        .then(json => {\n          console.log(Object.keys(json));\n          // 발급 완료 되었다면 해당 토큰을 클라이언트 Local Storage에 저장\n          if (json.id && json.token) {\n\n            console.log('로그인 성공! token: ' + json.token);\n\n            this.props.userHasAuthenticated(true, json.user.id, json.token);\n            this.props.history.push(\"/\");\n\n          }\n        })\n        .catch(error => {\n          console.log(error);\n          window.gapi && window.gapi.auth2.getAuthInstance().signOut();\n        });\n\n      }\n\n    })\n    .catch(error => {\n      console.log(error);\n      window.gapi && window.gapi.auth2.getAuthInstance().signOut();\n    });\n\n\n  }\n\n  // 서버에 등록되어있는 회원 정보로 로그인을 시도하는 경우\n  handleSubmit(submitEvent) {\n    let data = { //let은 var를 대체하는 블락변수이다.\n      username: this.state.username,\n      password: this.state.password\n    };\n\n    submitEvent.preventDefault();\n\n    let handleErrors = response => {\n      if (!response.ok) {\n        console.log(\"에러!!\");\n        console.log(response);\n        throw Error('response.statusText');\n      }\n      return response;\n    }\n\n    // 서버로부터 새로운 access token 발급받음\n    fetch('http://localhost:8000/api/jwt-login', { //서버에 올릴 때 :8000 지워야합니다.\n      method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      })\n    .then(handleErrors)\n    .then(res => res.json())\n    .then(json => {\n      // 발급 완료 되었다면 해당 토큰을 클라이언트 Local Storage에 저장\n      console.log(\"로그인 성공!\");\n      if (json.user && json.user.username && json.token) {\n        this.props.userHasAuthenticated(true, json.user.username, json.token);\n        this.props.history.push(\"/\");\n      }\n    })\n    .catch(error => alert(error));\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <LoginForm\n          username={this.state.username}\n          password={this.state.password}\n          handleChangeUsername={e => this.handleChange(e)}\n          handleChangePassword={e => this.handleChange(e)}\n          handleSubmit={e => this.handleSubmit(e)}\n          handleGoogleSignIn={e => this.handleGoogleSignIn(e)}\n          validate={this.validateForm}\n        />\n\n      </Fragment>\n\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
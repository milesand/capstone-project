{"ast":null,"code":"import _regeneratorRuntime from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/hong/PRTest/capstone-project/React/src/containers/Signup.js\";\nimport React, { Component } from \"react\";\nimport SignupForm from \"../components/auth/SignupForm\"; // 회원가입할 때 사용하는 컴포넌트\n\nvar Signup =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Signup, _Component);\n\n  function Signup(props) {\n    var _this;\n\n    _classCallCheck(this, Signup);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Signup).call(this, props));\n    _this.state = {\n      username: \"\",\n      username_err_message: \"\",\n      password: \"\",\n      password_err_message: \"\",\n      password_val: \"\",\n      password_val_err_message: \"\",\n      email: \"\",\n      email_err_message: \"\",\n      phone: \"\",\n      phone_err_message: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(Signup, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.isAuthenticated) {\n        this.props.history.push(\"/\");\n      }\n    }\n  }, {\n    key: \"validateField\",\n    value: function validateField(id) {\n      //여기서 회원가입 필드들의 유효성 확인. 아이디 8자 이상, 비밀번호 8자 이상 15자 이하, 비밀번호와 비밀번호 확인필드 동일해야함.\n      //return (username && username.length >= 8) && (password) && (password==password_val);\n      var val = true;\n      var idPasswordTest = /^.*(?=^.{8,15}$)(?=.*\\d)(?=.*[a-zA-Z]).*$/;\n      var emailTest = /^[\\w-]+(\\.[\\w-]+)*@([a-z0-9-]+(\\.[a-z0-9-]+)*?\\.[a-z]{2,6}|(\\d{1,3}\\.){3}\\d{1,3})(:\\d{4})?$/;\n      var phoneNumberTest = /^\\d{3}-\\d{3,4}-\\d{4}$/;\n\n      if (id == 'username') {\n        if (!this.state.username || !idPasswordTest.test(this.state.username)) val = false;\n      } else if (id == 'password') {\n        if (!this.state.password || !idPasswordTest.test(this.state.password)) val = false;\n      } else if (id == 'password_val') {\n        if (!this.state.password_val || this.state.password != this.state.password_val) val = false;\n      } else if (id == 'email') {\n        if (!this.state.email || !emailTest.test(this.state.email)) val = false;\n      } else if (id == 'phone') {\n        if (this.state.phone && !phoneNumberTest.test(this.state.phone)) val = false;\n      }\n\n      return val;\n    }\n  }, {\n    key: \"validateForm\",\n    value: function validateForm(username, password, password_val, email, phone) {\n      var val = true;\n      var idPasswordTest = /^.*(?=^.{8,15}$)(?=.*\\d)(?=.*[a-zA-Z]).*$/;\n      var emailTest = /^[\\w-]+(\\.[\\w-]+)*@([a-z0-9-]+(\\.[a-z0-9-]+)*?\\.[a-z]{2,6}|(\\d{1,3}\\.){3}\\d{1,3})(:\\d{4})?$/;\n      var phoneNumberTest = /^\\d{3}-\\d{3,4}-\\d{4}$/;\n      if (!username || !idPasswordTest.test(username)) val = false;\n      if (!password || !idPasswordTest.test(password)) val = false;\n      if (!password_val || password != password_val) val = false;\n      if (!email || !emailTest.test(email)) val = false;\n      if (phone && !phoneNumberTest.test(phone)) val = false;\n      return val;\n    }\n  }, {\n    key: \"valChangeControl\",\n    value: function valChangeControl(e) {\n      var _this2 = this;\n\n      var target = \"\";\n      var target_err_message = \"\";\n      var target_id = e.target.id;\n      var target_val = e.target.value;\n\n      if (target_id == 'username') {\n        target = \"username_err_message\";\n        target_err_message = \"8자 이상 15자 이하의 숫자, 영문자를 포함한 값으로 입력해주세요.\";\n      } else if (target_id == 'password') {\n        target = 'password_err_message';\n        target_err_message = \"8자 이상 15자 이하의 숫자, 영문자를 포함한 값으로 입력해주세요.\";\n      } else if (target_id == 'password_val') {\n        target = 'password_val_err_message';\n        target_err_message = \"비밀번호가 일치하지 않습니다.\";\n      } else if (target_id == 'email') {\n        target = 'email_err_message';\n        target_err_message = \"이메일 형식을 확인해주세요.\";\n      } else if (target_id == 'phone') {\n        target = 'phone_err_message';\n        target_err_message = \"다음과 같은 형태로 입력해주세요. 010-XXXX-XXXX\";\n      }\n\n      this.setState(_defineProperty({}, target_id, target_value), function () {\n        if (!_this2.validateField(target_id)) {\n          _this2.setState(_defineProperty({}, target, target_err_message));\n        } else {\n          _this2.setState(_defineProperty({}, target, \"\"));\n        }\n      });\n    }\n  }, {\n    key: \"submit\",\n    value: function () {\n      var _submit = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(e) {\n        var _this3 = this;\n\n        var data, err;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                e.preventDefault();\n                data = {\n                  username: this.state.username,\n                  password: this.state.password,\n                  email: this.state.email,\n                  phone_num: this.state.phone,\n                  social_auth: \"\",\n                  is_mail_authenticated: false\n                };\n\n                err = function err(response) {\n                  if (response.hasOwnProperty('username')) {\n                    throw Error(\"이미 존재하는 아이디입니다.\");\n                  } else if (response.hasOwnProperty('email')) {\n                    throw Error(\"이미 존재하는 이메일입니다.\");\n                  }\n\n                  return response;\n                };\n\n                fetch('http://localhost/api/register', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify(data)\n                }).then(function (res) {\n                  return res.json();\n                }).then(err).then(function (json) {\n                  if (json.user.username) {\n                    _this3.props.userStateChange(true, false, json.user.username, json.user.email); //회원가입 하고 바로 로그인 상태로 바뀌게 하고 싶을 때 사용\n\n\n                    var mailPage = function mailPage(response) {\n                      _this3.props.history.push('/mail-resend');\n\n                      return response;\n                    };\n\n                    var loginData = {\n                      username: _this3.state.username,\n                      password: _this3.state.password // 서버로부터 새로운 access token 발급받음\n\n                    };\n                    fetch('http://localhost/api/jwt-login', {\n                      //보통 fetch는 쿠키를 보내거나 받지 않는다. 쿠키를 전송하거나 받기 위해서는 credentials 옵션을 반드시 설정해야 한다.\n                      method: 'POST',\n                      headers: {\n                        'Content-Type': 'application/json'\n                      },\n                      credentials: 'include',\n                      //서버에 실을 때 수정\n                      body: JSON.stringify(loginData)\n                    }).then(function (res) {\n                      return res.json();\n                    }).then(mailPage);\n                  }\n                }).catch(function (error) {\n                  return alert(error);\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function submit(_x) {\n        return _submit.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      return React.createElement(SignupForm, {\n        username: this.state.username,\n        username_err_message: this.state.username_err_message,\n        password: this.state.password,\n        password_err_message: this.state.password_err_message,\n        password_val: this.state.password_val //비밀번호 확인 필드를 위해 추가\n        ,\n        password_val_err_message: this.state.password_val_err_message,\n        email: this.state.email,\n        email_err_message: this.state.email_err_message,\n        phone: this.state.phone,\n        phone_err_message: this.state.phone_err_message,\n        handleChangeUsername: function handleChangeUsername(e) {\n          return _this4.handleChange(e);\n        },\n        handleChangePassword: function handleChangePassword(e) {\n          return _this4.handleChange(e);\n        },\n        handleChangePassword_val: function handleChangePassword_val(e) {\n          return _this4.handleChange(e);\n        },\n        handleChangeEmail: function handleChangeEmail(e) {\n          return _this4.handleChange(e);\n        },\n        handleChangePhone: function handleChangePhone(e) {\n          return _this4.handleChange(e);\n        },\n        handleSubmit: function handleSubmit(e) {\n          return _this4.handleSubmit(e);\n        },\n        validate: this.validateForm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Signup;\n}(Component);\n\nexport { Signup as default };","map":{"version":3,"sources":["/home/hong/PRTest/capstone-project/React/src/containers/Signup.js"],"names":["React","Component","SignupForm","Signup","props","state","username","username_err_message","password","password_err_message","password_val","password_val_err_message","email","email_err_message","phone","phone_err_message","isAuthenticated","history","push","id","val","idPasswordTest","emailTest","phoneNumberTest","test","e","target","target_err_message","target_id","target_val","value","setState","target_value","validateField","preventDefault","data","phone_num","social_auth","is_mail_authenticated","err","response","hasOwnProperty","Error","fetch","method","headers","body","JSON","stringify","then","res","json","user","userStateChange","mailPage","loginData","credentials","catch","error","alert","handleChange","handleSubmit","validateForm"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport SignupForm from \"../components/auth/SignupForm\";\n\n// 회원가입할 때 사용하는 컴포넌트\nexport default class Signup extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      username: \"\",\n      username_err_message:\"\",\n      password: \"\",\n      password_err_message:\"\",\n      password_val: \"\",\n      password_val_err_message:\"\",\n      email: \"\",\n      email_err_message:\"\",\n      phone: \"\",\n      phone_err_message:\"\",\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.isAuthenticated) {\n      this.props.history.push(\"/\");\n    }\n  }\n\n  \n  validateField(id) { //여기서 회원가입 필드들의 유효성 확인. 아이디 8자 이상, 비밀번호 8자 이상 15자 이하, 비밀번호와 비밀번호 확인필드 동일해야함.\n    //return (username && username.length >= 8) && (password) && (password==password_val);\n    let val = true;\n    const idPasswordTest=/^.*(?=^.{8,15}$)(?=.*\\d)(?=.*[a-zA-Z]).*$/;\n    const emailTest=/^[\\w-]+(\\.[\\w-]+)*@([a-z0-9-]+(\\.[a-z0-9-]+)*?\\.[a-z]{2,6}|(\\d{1,3}\\.){3}\\d{1,3})(:\\d{4})?$/;\n    const phoneNumberTest = /^\\d{3}-\\d{3,4}-\\d{4}$/;\n    \n    if(id=='username'){\n      if(!this.state.username||!idPasswordTest.test(this.state.username)) val=false;\n    }\n    else if(id=='password'){\n      if(!this.state.password||!idPasswordTest.test(this.state.password)) val=false;\n    }\n    else if(id=='password_val'){\n      if(!this.state.password_val||this.state.password!=this.state.password_val) val=false;\n    }\n    else if(id=='email'){\n      if(!this.state.email||!emailTest.test(this.state.email)) val=false;\n    }\n    else if(id=='phone'){\n      if(this.state.phone&&!phoneNumberTest.test(this.state.phone)) val=false;\n    }\n    return val;\n  }\n\n  validateForm(username, password, password_val, email, phone) {\n    let val = true;\n    const idPasswordTest=/^.*(?=^.{8,15}$)(?=.*\\d)(?=.*[a-zA-Z]).*$/;\n    const emailTest=/^[\\w-]+(\\.[\\w-]+)*@([a-z0-9-]+(\\.[a-z0-9-]+)*?\\.[a-z]{2,6}|(\\d{1,3}\\.){3}\\d{1,3})(:\\d{4})?$/;\n    const phoneNumberTest = /^\\d{3}-\\d{3,4}-\\d{4}$/;\n    if(!username||!idPasswordTest.test(username)) val=false;\n    if(!password||!idPasswordTest.test(password)) val=false;\n    if(!password_val||password!=password_val) val=false;\n    if(!email||!emailTest.test(email)) val=false;\n    if(phone&&!phoneNumberTest.test(phone)) val=false;\n    return val;\n  }\n\n  valChangeControl(e){\n    let target=\"\";\n    let target_err_message=\"\";\n    let target_id=e.target.id;\n    let target_val=e.target.value;\n\n    if(target_id=='username'){\n      target=\"username_err_message\";\n      target_err_message=\"8자 이상 15자 이하의 숫자, 영문자를 포함한 값으로 입력해주세요.\";\n    }\n    else if(target_id=='password'){\n      target='password_err_message';\n      target_err_message=\"8자 이상 15자 이하의 숫자, 영문자를 포함한 값으로 입력해주세요.\";\n    }\n    else if(target_id=='password_val'){\n      target='password_val_err_message';\n      target_err_message=\"비밀번호가 일치하지 않습니다.\";\n    }\n    else if(target_id=='email'){\n      target='email_err_message';\n      target_err_message=\"이메일 형식을 확인해주세요.\";\n    }\n    else if(target_id=='phone'){\n      target='phone_err_message';\n      target_err_message=\"다음과 같은 형태로 입력해주세요. 010-XXXX-XXXX\";\n    }\n\n    this.setState({\n      [target_id]: target_value //SignupForm.js에서 정해놓은 input id값 및 value값\n    }, ()=> {\n      if(!this.validateField(target_id)){\n        this.setState({\n          [target]: target_err_message  //대괄호에 문자열을 넣으면 해당 문자열로 state를 업데이트 할 수 있음.\n        }); \n      }\n      else{\n        this.setState({\n          [target]: \"\"\n        });\n      }\n    }\n    );\n  }\n\n  async submit(e) {       \n    e.preventDefault();\n    let data = {\n      username: this.state.username,\n      password: this.state.password,\n      email: this.state.email,\n      phone_num: this.state.phone,\n      social_auth: \"\",\n      is_mail_authenticated: false,\n    };\n\n    let err = response => {\n      if (response.hasOwnProperty('username')) {\n        throw Error(\"이미 존재하는 아이디입니다.\");\n      }\n      else if(response.hasOwnProperty('email')){\n        throw Error(\"이미 존재하는 이메일입니다.\");\n      }\n      return response;\n    }\n\n    fetch('http://localhost/api/register', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    })\n    .then(res => res.json())\n    .then(err)\n    .then(json => {\n      if (json.user.username) {\n        this.props.userStateChange(true, false, json.user.username, json.user.email); //회원가입 하고 바로 로그인 상태로 바뀌게 하고 싶을 때 사용\n        let mailPage = response => {\n          this.props.history.push('/mail-resend');\n          return response;\n        }\n    \n        let loginData={\n          username: this.state.username,\n          password: this.state.password\n        }\n        // 서버로부터 새로운 access token 발급받음\n        fetch('http://localhost/api/jwt-login', {\n          //보통 fetch는 쿠키를 보내거나 받지 않는다. 쿠키를 전송하거나 받기 위해서는 credentials 옵션을 반드시 설정해야 한다.\n          method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            credentials : 'include', //서버에 실을 때 수정\n            body: JSON.stringify(loginData)\n          })\n        .then(res => res.json())\n        .then(mailPage)\n      }\n    }).catch(error => alert(error));\n  }\n\n  render() {\n    return (\n      <SignupForm\n        username={this.state.username}\n        username_err_message={this.state.username_err_message}\n        password={this.state.password}\n        password_err_message={this.state.password_err_message}\n        password_val={this.state.password_val} //비밀번호 확인 필드를 위해 추가\n        password_val_err_message={this.state.password_val_err_message}\n        email={this.state.email}\n        email_err_message={this.state.email_err_message}\n        phone={this.state.phone}\n        phone_err_message={this.state.phone_err_message}\n        handleChangeUsername={e => this.handleChange(e)}\n        handleChangePassword={e => this.handleChange(e)}\n        handleChangePassword_val={e => this.handleChange(e)}\n        handleChangeEmail={e => this.handleChange(e)}\n        handleChangePhone={e => this.handleChange(e)}\n        handleSubmit={e => this.handleSubmit(e)}\n        validate={this.validateForm}\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/hong/PRTest/capstone-project/React/src/containers/Home.js\";\nimport React, { Component } from \"react\";\nimport \"./style2.css\"; //테스트 페이지입니다. 나중에 메인 페이지 만들면 교체해주세요.\n\nvar Home =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Home, _Component);\n\n  function Home() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Home);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Home)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      profile: []\n    };\n    return _this;\n  }\n\n  _createClass(Home, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var handleErrors = function handleErrors(response) {\n        if (!response.ok) {\n          throw Error(response.statusText);\n        }\n\n        return response;\n      };\n\n      fetch('http://localhost/api/user', {\n        method: \"GET\",\n        credentials: 'include'\n      }).then(handleErrors).then(function (res) {\n        return res.json();\n      }).then(function (content) {\n        console.log('json test.');\n        console.log(content);\n\n        _this2.setState({\n          profile: content\n        });\n      }).catch(function (error) {\n        return alert(error);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log(\"render test.\");\n      console.log(this.props);\n      return React.createElement(\"div\", {\n        className: \"Home\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, this.state && this.state.profile['username'] && //이 방법을 통해 서버에서 정보를 가져오기 전에 렌더링 되는 것을 막을 수 있다.\n      React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, \"Hi, \", this.state.profile['username']), React.createElement(\"div\", {\n        className: \"lander\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Home;\n}(Component);\n\nexport { Home as default };","map":{"version":3,"sources":["/home/hong/PRTest/capstone-project/React/src/containers/Home.js"],"names":["React","Component","Home","state","profile","handleErrors","response","ok","Error","statusText","fetch","method","credentials","then","res","json","content","console","log","setState","catch","error","alert","props"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,cAAP,C,CAEA;;IACqBC,I;;;;;;;;;;;;;;;;;UACnBC,K,GAAQ;AACNC,MAAAA,OAAO,EAAE;AADH,K;;;;;;wCAIY;AAAA;;AAClB,UAAIC,YAAY,GAAG,SAAfA,YAAe,CAAAC,QAAQ,EAAI;AAC7B,YAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAChB,gBAAMC,KAAK,CAACF,QAAQ,CAACG,UAAV,CAAX;AACD;;AACD,eAAOH,QAAP;AACD,OALD;;AAOAI,MAAAA,KAAK,CAAC,2BAAD,EAA8B;AACjCC,QAAAA,MAAM,EAAE,KADyB;AAEjCC,QAAAA,WAAW,EAAE;AAFoB,OAA9B,CAAL,CAICC,IAJD,CAIMR,YAJN,EAKCQ,IALD,CAKM,UAAAC,GAAG;AAAA,eAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,OALT,EAMCF,IAND,CAMM,UAAAG,OAAO,EAAI;AACfC,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;;AACA,QAAA,MAAI,CAACG,QAAL,CAAc;AACZf,UAAAA,OAAO,EAAEY;AADG,SAAd;AAGD,OAZD,EAaCI,KAbD,CAaO,UAAAC,KAAK;AAAA,eAAIC,KAAK,CAACD,KAAD,CAAT;AAAA,OAbZ;AAcH;;;6BAEU;AACPJ,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKK,KAAjB;AACA,aACE;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,KAAKpB,KAAL,IAAc,KAAKA,KAAL,CAAWC,OAAX,CAAmB,UAAnB,CAAd,IAAgD;AAChD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAS,KAAKD,KAAL,CAAWC,OAAX,CAAmB,UAAnB,CAAT,CAFJ,EAIE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,CADF;AASD;;;;EAzC+BH,S;;SAAbC,I","sourcesContent":["import React, { Component } from \"react\";\nimport \"./style2.css\";\n\n//테스트 페이지입니다. 나중에 메인 페이지 만들면 교체해주세요.\nexport default class Home extends Component {\n  state = {\n    profile: []\n  };\n\n  componentDidMount() {\n    let handleErrors = response => {\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n      return response;\n    }\n\n    fetch('http://localhost/api/user', {\n      method: \"GET\",\n      credentials: 'include',\n    })\n    .then(handleErrors)\n    .then(res => res.json())\n    .then(content => {\n      console.log('json test.');\n      console.log(content);\n      this.setState({\n        profile: content\n      });\n    })\n    .catch(error => alert(error));\n}\n\n  render() {\n    console.log(\"render test.\");\n    console.log(this.props);\n    return (\n      <div className=\"Home\">\n        { this.state && this.state.profile['username'] && //이 방법을 통해 서버에서 정보를 가져오기 전에 렌더링 되는 것을 막을 수 있다.\n          <h3>Hi, {this.state.profile['username']}</h3>\n        }\n        <div className=\"lander\">\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
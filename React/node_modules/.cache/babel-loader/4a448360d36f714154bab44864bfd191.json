{"ast":null,"code":"import _defineProperty from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/hong/PRTest/capstone-project/React/src/containers/Login.js\";\nimport React, { Component, Fragment } from \"react\";\nimport LoginForm from \"../components/auth/LoginForm\"; //로그인\n\nvar Login =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Login, _Component);\n\n  //export default : 다른 모듈에서 이 모듈을 import할 때 내보낼 대표 값\n  function Login(props) {\n    var _this;\n\n    _classCallCheck(this, Login);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Login).call(this, props));\n    _this.state = {\n      username: \"\",\n      password: \"\"\n    };\n    console.log(\"로그인 시작.\");\n    return _this;\n  } //유저 로그인 상태 체크\n\n\n  _createClass(Login, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.isLogin) {\n        this.props.history.push(\"/\");\n      }\n    }\n  }, {\n    key: \"validateField\",\n    value: function validateField(username, password) {\n      return username && username.length > 0 && password && password.length > 0;\n    }\n  }, {\n    key: \"valChangeControl\",\n    value: function valChangeControl(e) {\n      var target_id = e.target.id;\n      var target_val = e.target.value;\n      console.log(\"changeControl!\");\n      this.setState(_defineProperty({}, target_id, target_val));\n      console.log(\"CC test.\");\n      console.log(this.state.username);\n      console.log(this.state.password);\n    } //구글 로그인 구현하기\n    // 일반 로그인\n\n  }, {\n    key: \"submit\",\n    value: function submit(e) {\n      var _this2 = this;\n\n      e.preventDefault();\n\n      var err = function err(response) {\n        console.log(response);\n\n        if (response.hasOwnProperty(\"error\")) {\n          // response에 error 키를 가진 값이 있을 경우 에러 발생했다는 의미\n          if (response.hasOwnProperty(\"email\")) {\n            //이메일 인증 안받았을 때\n            _this2.props.userStateChange(true, false, data.username, response['email']);\n\n            localStorage.setItem('isLogin', true);\n\n            _this2.props.history.push('/mail-resend'); //이메일 인증 페이지로 리다이렉트\n\n          } else {\n            //아이디 비밀번호 틀렸을 때\n            throw Error(response['error']);\n          }\n        }\n\n        return response;\n      };\n\n      var data = {\n        //let은 var를 대체하는 블락변수이다.\n        username: this.state.username,\n        password: this.state.password\n      }; // JWT 토큰을 통한 로그인 수행\n\n      fetch('http://localhost/api/jwt-login', {\n        //보통 fetch는 쿠키를 보내거나 받지 않는다. 쿠키를 전송하거나 받기 위해서는 credentials 옵션을 반드시 설정해야 한다.\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        //서버에 실을 때 수정\n        body: JSON.stringify(data)\n      }).then(function (res) {\n        return res.json();\n      }).then(err).then(function (json) {\n        console.log(\"로그인 성공!\");\n\n        if (json.email && json.username) {\n          _this2.props.userStateChange(true, true, json.username, json.email);\n\n          _this2.props.history.push(\"/\");\n        }\n      }).catch(function (error) {\n        return alert(error);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      console.log('login render.');\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(LoginForm, {\n        username: this.state.username,\n        password: this.state.password,\n        handleChangeUsername: function handleChangeUsername(e) {\n          return _this3.valChangeControl(e);\n        },\n        handleChangePassword: function handleChangePassword(e) {\n          return _this3.valChangeControl(e);\n        },\n        handleSubmit: function handleSubmit(e) {\n          return _this3.handleSubmit(e);\n        },\n        validate: this.validateForm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Login;\n}(Component);\n\nexport { Login as default };","map":{"version":3,"sources":["/home/hong/PRTest/capstone-project/React/src/containers/Login.js"],"names":["React","Component","Fragment","LoginForm","Login","props","state","username","password","console","log","isLogin","history","push","length","e","target_id","target","id","target_val","value","setState","preventDefault","err","response","hasOwnProperty","userStateChange","data","localStorage","setItem","Error","fetch","method","headers","credentials","body","JSON","stringify","then","res","json","email","catch","error","alert","valChangeControl","handleSubmit","validateForm"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport LoginForm from \"../components/auth/LoginForm\";\n\n//로그인\nexport default class Login extends Component { //export default : 다른 모듈에서 이 모듈을 import할 때 내보낼 대표 값\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: \"\",\n      password: \"\"\n    };\n    console.log(\"로그인 시작.\");\n  }\n\n  //유저 로그인 상태 체크\n  componentDidMount() {\n    if (this.props.isLogin) {\n      this.props.history.push(\"/\");\n    }\n  }\n\n  validateField(username, password) {\n    return (username&&username.length>0&&password&&password.length>0);\n  }\n\n  valChangeControl(e){\n    let target_id=e.target.id;\n    let target_val=e.target.value;\n    console.log(\"changeControl!\");\n    this.setState({\n      [target_id]: target_val\n    });\n    console.log(\"CC test.\");\n    console.log(this.state.username);\n    console.log(this.state.password);\n  }\n\n  //구글 로그인 구현하기\n\n\n  // 일반 로그인\n  submit(e) {\n    e.preventDefault();\n\n    let err = response => {\n      console.log(response);\n      if (response.hasOwnProperty(\"error\")) { // response에 error 키를 가진 값이 있을 경우 에러 발생했다는 의미\n        if(response.hasOwnProperty(\"email\")){ //이메일 인증 안받았을 때\n          this.props.userStateChange(true, false, data.username, response['email']); \n          localStorage.setItem('isLogin', true);\n          this.props.history.push('/mail-resend'); //이메일 인증 페이지로 리다이렉트\n        }\n        else{ //아이디 비밀번호 틀렸을 때\n           throw Error(response['error']);\n        }\n      }\n      return response;\n    }\n\n    \n    let data = { //let은 var를 대체하는 블락변수이다.\n      username: this.state.username,\n      password: this.state.password\n    };\n\n    // JWT 토큰을 통한 로그인 수행\n    fetch('http://localhost/api/jwt-login', {\n      //보통 fetch는 쿠키를 보내거나 받지 않는다. 쿠키를 전송하거나 받기 위해서는 credentials 옵션을 반드시 설정해야 한다.\n      method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials : 'include', //서버에 실을 때 수정\n        body: JSON.stringify(data)\n      })\n    .then(res => res.json())\n    .then(err)\n    .then(json => {\n      console.log(\"로그인 성공!\");\n      if (json.email && json.username) {\n        this.props.userStateChange(true, true, json.username, json.email);    \n        this.props.history.push(\"/\");\n      }\n    })\n    .catch(error => alert(error));\n  }\n\n  render() {\n    console.log('login render.');\n    return (\n      <Fragment>\n        <LoginForm\n            username={this.state.username}\n            password={this.state.password}\n            handleChangeUsername={e => this.valChangeControl(e)}\n            handleChangePassword={e => this.valChangeControl(e)}\n            handleSubmit={e => this.handleSubmit(e)}\n            validate={this.validateForm}\n        />\n      </Fragment>\n\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
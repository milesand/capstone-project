{"ast":null,"code":"import _regeneratorRuntime from \"/home/hong/capstone-project/React/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/hong/capstone-project/React/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/home/hong/capstone-project/React/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/hong/capstone-project/React/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/hong/capstone-project/React/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/hong/capstone-project/React/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/hong/capstone-project/React/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/hong/capstone-project/React/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/hong/capstone-project/React/src/containers/Signup.js\";\nimport React, { Component } from \"react\";\nimport SignupForm from \"../components/auth/SignupForm\"; // 회원가입할 때 사용하는 컴포넌트\n\nvar Signup =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Signup, _Component);\n\n  function Signup(props) {\n    var _this;\n\n    _classCallCheck(this, Signup);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Signup).call(this, props));\n\n    _this.handleChange = function (event) {\n      _this.setState(_defineProperty({}, event.target.id, event.target.value));\n    };\n\n    _this.state = {\n      username: \"\",\n      password: \"\",\n      password_val: \"\",\n      email: \"\",\n      phone: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(Signup, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.isAuthenticated) {\n        this.props.history.push(\"/\");\n      }\n    }\n  }, {\n    key: \"validateForm\",\n    value: function validateForm(username, password, password_val) {\n      //여기서 회원가입 필드들의 유효성 확인. 아이디 8자 이상, 비밀번호 8자 이상 15자 이하, 비밀번호와 비밀번호 확인필드 동일해야함.\n      return username && username.length >= 8 && password && password == password_val;\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function () {\n      var _handleSubmit = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(submitEvent) {\n        var _this2 = this;\n\n        var data, handleErrors;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                data = {\n                  username: this.state.username,\n                  password: this.state.password,\n                  email: this.state.email,\n                  phone_num: this.state.phone,\n                  social_auth: \"\",\n                  is_mail_authenticated: false\n                };\n                console.log(\"data : \" + JSON.stringify(data));\n                submitEvent.preventDefault();\n\n                handleErrors = function handleErrors(response) {\n                  console.log(typeof response);\n                  console.log(JSON.stringify(response));\n\n                  if (!response.ok) {}\n\n                  return response;\n                };\n\n                fetch('http://localhost:8000/api/register', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify(data)\n                }).then(handleErrors).then(function (res) {\n                  return res.json();\n                }).then(function (json) {\n                  if (json.username && json.token) {\n                    console.log(\"회원가입 완료!\");\n\n                    _this2.props.userHasAuthenticated(true, json.username, json.token);\n\n                    _this2.props.history.push(\"/\");\n                  }\n                }).catch(function (error) {\n                  return alert(error);\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function handleSubmit(_x) {\n        return _handleSubmit.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(SignupForm, {\n        username: this.state.username,\n        password: this.state.password,\n        password_val: this.state.password_val //비밀번호 확인 필드를 위해 추가\n        ,\n        handleChangeUsername: function handleChangeUsername(e) {\n          return _this3.handleChange(e);\n        },\n        handleChangePassword: function handleChangePassword(e) {\n          return _this3.handleChange(e);\n        },\n        handleChangePassword_val: function handleChangePassword_val(e) {\n          return _this3.handleChange(e);\n        },\n        handleChangeEmail: function handleChangeEmail(e) {\n          return _this3.handleChange(e);\n        },\n        handleChangePhone: function handleChangePhone(e) {\n          return _this3.handleChange(e);\n        },\n        handleSubmit: function handleSubmit(e) {\n          return _this3.handleSubmit(e);\n        },\n        validate: this.validateForm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Signup;\n}(Component);\n\nexport { Signup as default };","map":{"version":3,"sources":["/home/hong/capstone-project/React/src/containers/Signup.js"],"names":["React","Component","SignupForm","Signup","props","handleChange","event","setState","target","id","value","state","username","password","password_val","email","phone","isAuthenticated","history","push","length","submitEvent","data","phone_num","social_auth","is_mail_authenticated","console","log","JSON","stringify","preventDefault","handleErrors","response","ok","fetch","method","headers","body","then","res","json","token","userHasAuthenticated","catch","error","alert","e","handleSubmit","validateForm"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport SignupForm from \"../components/auth/SignupForm\";\n\n// 회원가입할 때 사용하는 컴포넌트\nexport default class Signup extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      username: \"\",\n      password: \"\",\n      password_val: \"\",\n      email: \"\",\n      phone: \"\",\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.isAuthenticated) {\n      this.props.history.push(\"/\");\n    }\n  }\n\n  validateForm(username, password, password_val) { //여기서 회원가입 필드들의 유효성 확인. 아이디 8자 이상, 비밀번호 8자 이상 15자 이하, 비밀번호와 비밀번호 확인필드 동일해야함.\n    return (username && username.length >= 8) && (password) && (password==password_val);\n  }\n\n  handleChange = event => {\n    this.setState({\n      [event.target.id]: event.target.value //SignupForm.js에서 정해놓은 input id값 및 value값\n    });\n  }\n\n  async handleSubmit(submitEvent) {\n    let data = {\n      username: this.state.username,\n      password: this.state.password,\n      email: this.state.email,\n      phone_num: this.state.phone,\n      social_auth: \"\",\n      is_mail_authenticated: false,\n    };\n    \n    console.log(\"data : \" + JSON.stringify(data))\n    submitEvent.preventDefault();\n\n    let handleErrors = response => {\n      console.log(typeof(response));\n      console.log(JSON.stringify(response));\n      if (!response.ok) {\n        \n      }\n      return response;\n    }\n\n    fetch('http://localhost:8000/api/register', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    })\n    .then(handleErrors)\n    .then(res => res.json())\n    .then(json => {\n      if (json.username && json.token) {\n        console.log(\"회원가입 완료!\");\n        this.props.userHasAuthenticated(true, json.username, json.token);\n        this.props.history.push(\"/\");\n      }\n    })\n    .catch(error => alert(error));\n  }\n\n  render() {\n    return (\n      <SignupForm\n        username={this.state.username}\n        password={this.state.password}\n        password_val={this.state.password_val} //비밀번호 확인 필드를 위해 추가\n        handleChangeUsername={e => this.handleChange(e)}\n        handleChangePassword={e => this.handleChange(e)}\n        handleChangePassword_val={e => this.handleChange(e)}\n        handleChangeEmail={e => this.handleChange(e)}\n        handleChangePhone={e => this.handleChange(e)}\n        handleSubmit={e => this.handleSubmit(e)}\n        validate={this.validateForm}\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
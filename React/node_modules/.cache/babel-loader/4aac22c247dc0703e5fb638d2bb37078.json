{"ast":null,"code":"import _defineProperty from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/hong/PRTest/capstone-project/React/src/containers/Signup.js\";\nimport React, { Component } from \"react\";\nimport SignupForm from \"../components/LoginComponents/SignupForm\"; // 회원가입할 때 사용하는 컴포넌트\n\nvar Signup =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Signup, _Component);\n\n  function Signup(props) {\n    var _this;\n\n    _classCallCheck(this, Signup);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Signup).call(this, props));\n    _this.state = {\n      username: \"\",\n      username_err_message: \"\",\n      nickname: \"\",\n      nickname_err_message: \"\",\n      password: \"\",\n      password_err_message: \"\",\n      password_val: \"\",\n      password_val_err_message: \"\",\n      email: \"\",\n      email_err_message: \"\",\n      phone: \"\",\n      phone_err_message: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(Signup, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.isLogin) {\n        this.props.history.push(\"/\");\n      }\n    }\n  }, {\n    key: \"validateField\",\n    value: function validateField(id) {\n      //여기서 회원가입 필드들의 유효성 확인.\n      var val = true;\n      var idPasswordTest = /^.*(?=^.{8,15}$)(?=.*\\d)(?=.*[a-zA-Z]).*$/;\n      var nicknameTest = /^.*(?=^.{2,15}$)(?=.*[0-9a-zA-Z]).*$/;\n      var emailTest = /^[\\w-]+(\\.[\\w-]+)*@([a-z0-9-]+(\\.[a-z0-9-]+)*?\\.[a-z]{2,6}|(\\d{1,3}\\.){3}\\d{1,3})(:\\d{4})?$/;\n      var phoneNumberTest = /^\\d{3}-\\d{3,4}-\\d{4}$/;\n\n      if (id == 'username') {\n        if (!this.state.username || !idPasswordTest.test(this.state.username)) val = false;\n      } else if (id == 'nickname') {\n        if (!this.state.nickname || !nicknameTest.test(this.state.nickanme)) val = false;\n      } else if (id == 'password') {\n        if (!this.state.password || !idPasswordTest.test(this.state.password)) val = false;\n      } else if (id == 'password_val') {\n        if (!this.state.password_val || this.state.password != this.state.password_val) val = false;\n      } else if (id == 'email') {\n        if (!this.state.email || !emailTest.test(this.state.email)) val = false;\n      } else if (id == 'phone') {\n        if (this.state.phone && !phoneNumberTest.test(this.state.phone)) val = false;\n      }\n\n      return val;\n    }\n  }, {\n    key: \"validateAllField\",\n    value: function validateAllField(username, nickname, password, password_val, email, phone) {\n      var val = true;\n      var idPasswordTest = /^.*(?=^.{8,15}$)(?=.*\\d)(?=.*[a-zA-Z]).*$/;\n      var nicknameTest = /^.*(?=^.{2,15}$)(?=.*[0-9a-zA-Z]).*$/;\n      var emailTest = /^[\\w-]+(\\.[\\w-]+)*@([a-z0-9-]+(\\.[a-z0-9-]+)*?\\.[a-z]{2,6}|(\\d{1,3}\\.){3}\\d{1,3})(:\\d{4})?$/;\n      var phoneNumberTest = /^\\d{3}-\\d{3,4}-\\d{4}$/;\n      if (!username || !idPasswordTest.test(username)) val = false;\n      if (!nickname || !nicknameTest.test(nickname)) val = false;\n      if (!password || !idPasswordTest.test(password)) val = false;\n      if (!password_val || password != password_val) val = false;\n      if (!email || !emailTest.test(email)) val = false;\n      if (phone && !phoneNumberTest.test(phone)) val = false;\n      return val;\n    }\n  }, {\n    key: \"valChangeControl\",\n    value: function valChangeControl(e) {\n      var _this2 = this;\n\n      var target = \"\";\n      var target_err_message = \"\";\n      var target_id = e.target.id;\n      var target_val = e.target.value;\n\n      if (target_id == 'username') {\n        target = \"username_err_message\";\n        target_err_message = \"8자 이상 15자 이하의 숫자, 영문자를 포함한 값으로 입력해주세요.\";\n      } else if (target_id == 'nickname') {\n        target = \"nickname_err_message\";\n        target_err_message = \"2자 이상 15자 이하의 숫자 또는 영문자를 포함한 값으로 입력해주세요.\";\n      } else if (target_id == 'password') {\n        target = 'password_err_message';\n        target_err_message = \"8자 이상 15자 이하의 숫자, 영문자를 포함한 값으로 입력해주세요.\";\n      } else if (target_id == 'password_val') {\n        target = 'password_val_err_message';\n        target_err_message = \"비밀번호가 일치하지 않습니다.\";\n      } else if (target_id == 'email') {\n        target = 'email_err_message';\n        target_err_message = \"이메일 형식을 확인해주세요.\";\n      } else if (target_id == 'phone') {\n        target = 'phone_err_message';\n        target_err_message = \"다음과 같은 형태로 입력해주세요. 010-XXXX-XXXX\";\n      }\n\n      this.setState(_defineProperty({}, target_id, target_val), function () {\n        if (!_this2.validateField(target_id)) {\n          _this2.setState(_defineProperty({}, target, target_err_message));\n        } else {\n          _this2.setState(_defineProperty({}, target, \"\"));\n        }\n      });\n    }\n  }, {\n    key: \"submit\",\n    value: function submit(e) {\n      var _this3 = this;\n\n      e.preventDefault();\n      var data = {\n        username: this.state.username,\n        password: this.state.password,\n        email: this.state.email,\n        phone_num: this.state.phone,\n        social_auth: \"\",\n        is_mail_authenticated: false\n      };\n      this.props.toggleLoadingState(); // App.js의 isLoading state를 true로 변경\n\n      fetch('http://localhost/api/registration', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      }).then(function (res) {\n        return res.json();\n      }).then(function (content) {\n        console.log(content);\n\n        if (content.hasOwnProperty('username')) {\n          throw Error(\"이미 존재하는 아이디입니다.\");\n        } else if (content.hasOwnProperty('email')) {\n          throw Error(\"이미 가입된 이메일입니다.\");\n        }\n\n        console.log(\"user : \", content.user);\n\n        if (content.user.username) {\n          _this3.props.userStateChange(true, false, content.user.username, content.user.nickname, content.user.email); //회원가입 하고 바로 로그인 상태로 바뀌게 하고 싶을 때 사용\n\n\n          var loginData = {\n            username: _this3.state.username,\n            password: _this3.state.password // 서버로부터 새로운 access token 발급받아 로그인 상태로 전환\n\n          };\n          fetch('http://localhost/api/jwt-login', {\n            //보통 fetch는 쿠키를 보내거나 받지 않는다. 쿠키를 전송하거나 받기 위해서는 credentials 옵션을 반드시 설정해야 한다.\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            credentials: 'include',\n            //서버에 실을 때 수정\n            body: JSON.stringify(loginData)\n          }).then(function (res) {\n            return res.json();\n          }).then(function (mailPage) {\n            _this3.props.toggleLoadingState();\n\n            _this3.props.history.push('/mail-resend');\n          });\n        }\n      }).catch(function (error) {\n        alert(error);\n\n        _this3.props.toggleLoadingState(); //fetch 과정에서 에러가 발생했을 때, isLoading state를 false로 돌려놓는다.\n\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      return React.createElement(SignupForm, {\n        username: this.state.username,\n        username_err_message: this.state.username_err_message,\n        password: this.state.password,\n        password_err_message: this.state.password_err_message,\n        password_val: this.state.password_val //비밀번호 확인 필드를 위해 추가\n        ,\n        password_val_err_message: this.state.password_val_err_message,\n        email: this.state.email,\n        email_err_message: this.state.email_err_message,\n        phone: this.state.phone,\n        phone_err_message: this.state.phone_err_message,\n        isLoading: this.props.isLoading,\n        validate: this.validateAllField,\n        changeUsername: function changeUsername(e) {\n          return _this4.valChangeControl(e);\n        },\n        changeNickname: function changeNickname(e) {\n          return _this4.valChangeControl(e);\n        },\n        changePassword: function changePassword(e) {\n          return _this4.valChangeControl(e);\n        },\n        changePassword_val: function changePassword_val(e) {\n          return _this4.valChangeControl(e);\n        },\n        changeEmail: function changeEmail(e) {\n          return _this4.valChangeControl(e);\n        },\n        changePhone: function changePhone(e) {\n          return _this4.valChangeControl(e);\n        },\n        submit: function submit(e) {\n          return _this4.submit(e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Signup;\n}(Component);\n\nexport { Signup as default };","map":{"version":3,"sources":["/home/hong/PRTest/capstone-project/React/src/containers/Signup.js"],"names":["React","Component","SignupForm","Signup","props","state","username","username_err_message","nickname","nickname_err_message","password","password_err_message","password_val","password_val_err_message","email","email_err_message","phone","phone_err_message","isLogin","history","push","id","val","idPasswordTest","nicknameTest","emailTest","phoneNumberTest","test","nickanme","e","target","target_err_message","target_id","target_val","value","setState","validateField","preventDefault","data","phone_num","social_auth","is_mail_authenticated","toggleLoadingState","fetch","method","headers","body","JSON","stringify","then","res","json","content","console","log","hasOwnProperty","Error","user","userStateChange","loginData","credentials","mailPage","catch","error","alert","isLoading","validateAllField","valChangeControl","submit"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport SignupForm from \"../components/LoginComponents/SignupForm\";\n\n// 회원가입할 때 사용하는 컴포넌트\nexport default class Signup extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      username: \"\",\n      username_err_message:\"\",\n      nickname: \"\",\n      nickname_err_message:\"\",\n      password: \"\",\n      password_err_message:\"\",\n      password_val: \"\",\n      password_val_err_message:\"\",\n      email: \"\",\n      email_err_message:\"\",\n      phone: \"\",\n      phone_err_message:\"\",\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.isLogin) {\n      this.props.history.push(\"/\");\n    }\n  }\n\n  \n  validateField(id) { //여기서 회원가입 필드들의 유효성 확인.\n    let val = true;\n    const idPasswordTest=/^.*(?=^.{8,15}$)(?=.*\\d)(?=.*[a-zA-Z]).*$/;\n    const nicknameTest=/^.*(?=^.{2,15}$)(?=.*[0-9a-zA-Z]).*$/;\n    const emailTest=/^[\\w-]+(\\.[\\w-]+)*@([a-z0-9-]+(\\.[a-z0-9-]+)*?\\.[a-z]{2,6}|(\\d{1,3}\\.){3}\\d{1,3})(:\\d{4})?$/;\n    const phoneNumberTest = /^\\d{3}-\\d{3,4}-\\d{4}$/;\n    \n    if(id=='username'){\n      if(!this.state.username||!idPasswordTest.test(this.state.username)) val=false;\n    }\n    else if(id=='nickname'){\n      if(!this.state.nickname||!nicknameTest.test(this.state.nickanme)) val=false;\n    }\n    else if(id=='password'){\n      if(!this.state.password||!idPasswordTest.test(this.state.password)) val=false;\n    }\n    else if(id=='password_val'){\n      if(!this.state.password_val||this.state.password!=this.state.password_val) val=false;\n    }\n    else if(id=='email'){\n      if(!this.state.email||!emailTest.test(this.state.email)) val=false;\n    }\n    else if(id=='phone'){\n      if(this.state.phone&&!phoneNumberTest.test(this.state.phone)) val=false;\n    }\n    return val;\n  }\n\n  validateAllField(username, nickname, password, password_val, email, phone) {\n    let val = true;\n    const idPasswordTest=/^.*(?=^.{8,15}$)(?=.*\\d)(?=.*[a-zA-Z]).*$/;\n    const nicknameTest=/^.*(?=^.{2,15}$)(?=.*[0-9a-zA-Z]).*$/;\n    const emailTest=/^[\\w-]+(\\.[\\w-]+)*@([a-z0-9-]+(\\.[a-z0-9-]+)*?\\.[a-z]{2,6}|(\\d{1,3}\\.){3}\\d{1,3})(:\\d{4})?$/;\n    const phoneNumberTest = /^\\d{3}-\\d{3,4}-\\d{4}$/;\n    if(!username||!idPasswordTest.test(username)) val=false;\n    if(!nickname||!nicknameTest.test(nickname)) val=false;\n    if(!password||!idPasswordTest.test(password)) val=false;\n    if(!password_val||password!=password_val) val=false;\n    if(!email||!emailTest.test(email)) val=false;\n    if(phone&&!phoneNumberTest.test(phone)) val=false;\n    return val;\n  }\n\n  valChangeControl(e){\n    let target=\"\";\n    let target_err_message=\"\";\n    let target_id=e.target.id;\n    let target_val=e.target.value;\n\n    if(target_id=='username'){\n      target=\"username_err_message\";\n      target_err_message=\"8자 이상 15자 이하의 숫자, 영문자를 포함한 값으로 입력해주세요.\";\n    }\n    else if(target_id=='nickname'){\n      target=\"nickname_err_message\";\n      target_err_message=\"2자 이상 15자 이하의 숫자 또는 영문자를 포함한 값으로 입력해주세요.\";\n    }\n    else if(target_id=='password'){\n      target='password_err_message';\n      target_err_message=\"8자 이상 15자 이하의 숫자, 영문자를 포함한 값으로 입력해주세요.\";\n    }\n    else if(target_id=='password_val'){\n      target='password_val_err_message';\n      target_err_message=\"비밀번호가 일치하지 않습니다.\";\n    }\n    else if(target_id=='email'){\n      target='email_err_message';\n      target_err_message=\"이메일 형식을 확인해주세요.\";\n    }\n    else if(target_id=='phone'){\n      target='phone_err_message';\n      target_err_message=\"다음과 같은 형태로 입력해주세요. 010-XXXX-XXXX\";\n    }\n\n    this.setState({\n      [target_id]: target_val //SignupForm.js에서 정해놓은 input id값 및 value값\n    }, ()=> {\n      if(!this.validateField(target_id)){\n        this.setState({\n          [target]: target_err_message  //대괄호에 문자열을 넣으면 해당 문자열로 state를 업데이트 할 수 있음.\n        }); \n      }\n      else{\n        this.setState({\n          [target]: \"\"\n        });\n      }\n    }\n    );\n  }\n\n  submit(e) {       \n    e.preventDefault();\n\n    let data = {\n      username: this.state.username,\n      password: this.state.password,\n      email: this.state.email,\n      phone_num: this.state.phone,\n      social_auth: \"\",\n      is_mail_authenticated: false,\n    };\n    this.props.toggleLoadingState(); // App.js의 isLoading state를 true로 변경\n    fetch('http://localhost/api/registration', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    })\n    .then(res => res.json())\n    .then(content => {\n      console.log(content);\n      if (content.hasOwnProperty('username')) {\n        throw Error(\"이미 존재하는 아이디입니다.\");\n      }\n\n      else if(content.hasOwnProperty('email')){\n        throw Error(\"이미 가입된 이메일입니다.\");\n      }\n\n      console.log(\"user : \", content.user);\n      if (content.user.username) {\n        this.props.userStateChange(true, false, content.user.username, content.user.nickname, content.user.email); //회원가입 하고 바로 로그인 상태로 바뀌게 하고 싶을 때 사용\n    \n        let loginData={\n          username: this.state.username,\n          password: this.state.password\n        }\n        // 서버로부터 새로운 access token 발급받아 로그인 상태로 전환\n        fetch('http://localhost/api/jwt-login', {\n          //보통 fetch는 쿠키를 보내거나 받지 않는다. 쿠키를 전송하거나 받기 위해서는 credentials 옵션을 반드시 설정해야 한다.\n          method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            credentials : 'include', //서버에 실을 때 수정\n            body: JSON.stringify(loginData)\n          })\n        .then(res => res.json())\n        .then(mailPage =>{\n          this.props.toggleLoadingState(); \n          this.props.history.push('/mail-resend');\n        })\n      }\n    }).catch(error =>{\n        alert(error);\n        this.props.toggleLoadingState(); //fetch 과정에서 에러가 발생했을 때, isLoading state를 false로 돌려놓는다.\n      } );\n  }\n\n  render() {\n    return (\n      <SignupForm\n        username={this.state.username}\n        username_err_message={this.state.username_err_message}\n        password={this.state.password}\n        password_err_message={this.state.password_err_message}\n        password_val={this.state.password_val} //비밀번호 확인 필드를 위해 추가\n        password_val_err_message={this.state.password_val_err_message}\n        email={this.state.email}\n        email_err_message={this.state.email_err_message}\n        phone={this.state.phone}\n        phone_err_message={this.state.phone_err_message}\n        isLoading={this.props.isLoading}\n        validate={this.validateAllField}\n        changeUsername={e => this.valChangeControl(e)}\n        changeNickname={e => this.valChangeControl(e)}\n        changePassword={e => this.valChangeControl(e)}\n        changePassword_val={e => this.valChangeControl(e)}\n        changeEmail={e => this.valChangeControl(e)}\n        changePhone={e => this.valChangeControl(e)}\n        submit={e => this.submit(e)}\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
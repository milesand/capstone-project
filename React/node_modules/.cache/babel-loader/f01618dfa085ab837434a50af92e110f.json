{"ast":null,"code":"import _classCallCheck from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/hong/PRTest/capstone-project/React/src/components/App.js\";\nimport React, { Component, Fragment } from \"react\";\nimport NavBar from \"./AuthRoutingComponents/Nav\";\nimport Route from \"./Route\";\nimport { withRouter } from \"react-router-dom\"; //로그아웃 했을 때 로그인 화면으로 리다이렉션하기 위해 import\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props)); //App 컴포넌트가 상속받은 Component가 지니고 있던 생성자를 super를 통해 미리 실행한다.\n\n    _this.userStateChange = function (authenticated, mailAuthenticated, username, email) {\n      console.log(\"thisStateTest.\", _this.state);\n      if ((!_this.state.isLogin || _this.state.isLogin == false) && authenticated == true) localStorage.setItem('isLogin', true);\n      if ((!_this.state.isMailAuthenticated || _this.state.isMailAuthenticated == false) && mailAuthenticated == true) localStorage.setItem('isMailAuthenticated', true);\n\n      if (email == 'google' || email == 'facebook') {\n        //소셜 로그인\n        _this.setState({\n          isLogin: authenticated,\n          username: username,\n          isMailAuthenticated: true\n        });\n      } else {\n        _this.setState({\n          isLogin: authenticated,\n          isMailAuthenticated: mailAuthenticated,\n          username: username,\n          email: email\n        });\n      }\n    };\n\n    _this.logout = function () {\n      console.log(\"logout called!\");\n\n      _this.deleteJWTToken();\n    };\n\n    console.log('App prop test.');\n    _this.state = {\n      //컴포넌트의 state 정의\n      username: \"\",\n      email: \"\",\n      isCheck: false,\n      //사용자가 로그인 상태인지 체크하면 true로 변경\n      isLogin: null,\n      isMailAuthenticated: null\n    };\n    console.log(_this.state);\n    return _this;\n  } // user 정보 받아오기\n\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      //컴포넌트가 만들어지고 render가 호출된 이후에 호출되는 메소드\n      var errorCheck = function errorCheck(response) {\n        console.log(\"err cherk.\");\n        console.log(response);\n\n        if (!_this2.state.isCheck) {\n          _this2.setState({\n            isCheck: true\n          });\n        }\n\n        if (!response.hasOwnProperty('error') && !_this2.state.isLogin) {\n          _this2.setState({\n            isLogin: true,\n            isMailAuthenticated: response.is_mail_authenticated,\n            username: response.username,\n            email: response.email\n          });\n        }\n\n        return response;\n      };\n\n      var jwtErrorCheck = function jwtErrorCheck(response) {\n        if (!response.ok) {\n          _this2.deleteJWTToken();\n\n          Promise.reject(); //서버에서 jwt 토큰 유효시간 줄여서 테스트해보기\n        }\n\n        return response;\n      };\n\n      fetch('http://localhost/api/user', {\n        // JWT 토큰이 저장되어 있는지, 그리고 저장되어 있다면 해당 JWT 토큰이 유효한지 확인\n        method: \"GET\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include'\n      }).then(function (res) {\n        return res.json();\n      }).then(errorCheck).then(function (content) {\n        if (_this2.state.isLogin) {\n          // 사용자가 로그인 중일 때\n          fetch('http://localhost/api/jwt-refresh', {\n            //JWT 토큰 재발급\n            method: \"POST\",\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            credentials: 'include'\n          }).then(jwtErrorCheck).then(function (res) {\n            return res.json();\n          }).then(function (content) {\n            console.log(\"토큰이 재발급되었습니다.\");\n            console.log(content);\n            console.log(_this2.state);\n\n            _this2.props.history.push('/');\n          }).catch(function (error) {\n            return console.log('JWT 토큰 재발급 에러! 이미 만료된 토큰입니다.');\n          });\n        }\n      }).catch(function (error) {\n        return console.log('로그인 체크 에러!');\n      });\n    }\n  }, {\n    key: \"deleteJWTToken\",\n    value: function deleteJWTToken() {\n      var _this3 = this;\n\n      var isTokenStored = true;\n\n      var tokenCheck = function tokenCheck(response) {\n        if (!response.ok) {\n          isTokenStored = false;\n        }\n\n        return response;\n      };\n\n      try {\n        fetch('http://localhost/api/logout', {\n          method: \"POST\",\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          credentials: 'include'\n        }).then(tokenCheck).then(function (res) {\n          if (isTokenStored) {\n            console.log(res);\n\n            _this3.setState({\n              isLogin: false,\n              isMailAuthenticated: false,\n              username: '',\n              userid: ''\n            });\n\n            console.log('Logged out successfully');\n\n            _this3.props.history.push(\"/login\");\n          }\n        });\n      } catch (_unused) {\n        console.log(\"error!\");\n        this.setState({\n          isLogin: false,\n          userid: ''\n        });\n        console.log('Logged out successfully');\n      }\n    } // 로그아웃시 서버로 요청 보내서 JWT 토큰이 저장된 httponly 쿠키 제거\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var childProps = {\n        username: this.state.username,\n        useremail: this.state.email,\n        isLogin: this.state.isLogin,\n        isMailAuthenticated: this.state.isMailAuthenticated,\n        userStateChange: this.userStateChange\n      };\n      console.log(\"child test.\");\n      console.log(childProps);\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, this.state && this.state.isLogin != null && React.createElement(NavBar, {\n        isLogin: this.state.isLogin,\n        username: this.state.username,\n        logout: this.logout,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }), this.state && this.state.isLogin != null && React.createElement(Route, {\n        childProps: childProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component); //export default App;\n\n\nexport default withRouter(App); //로그아웃 했을 때 로그인화면으로 리다이렉트하기 위해 바꿔준다.","map":{"version":3,"sources":["/home/hong/PRTest/capstone-project/React/src/components/App.js"],"names":["React","Component","Fragment","NavBar","Route","withRouter","App","props","userStateChange","authenticated","mailAuthenticated","username","email","console","log","state","isLogin","localStorage","setItem","isMailAuthenticated","setState","logout","deleteJWTToken","isCheck","errorCheck","response","hasOwnProperty","is_mail_authenticated","jwtErrorCheck","ok","Promise","reject","fetch","method","headers","credentials","then","res","json","content","history","push","catch","error","isTokenStored","tokenCheck","userid","childProps","useremail"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport NavBar from \"./AuthRoutingComponents/Nav\";\nimport Route from \"./Route\";\nimport { withRouter } from \"react-router-dom\"; //로그아웃 했을 때 로그인 화면으로 리다이렉션하기 위해 import\n\nclass App extends Component {\n  constructor(props) {\n    super(props); //App 컴포넌트가 상속받은 Component가 지니고 있던 생성자를 super를 통해 미리 실행한다.\n    console.log('App prop test.');\n    this.state = { //컴포넌트의 state 정의\n      username: \"\",\n      email: \"\",\n      isCheck: false, //사용자가 로그인 상태인지 체크하면 true로 변경\n      isLogin: null,\n      isMailAuthenticated: null\n    };\n    console.log(this.state);\n  }\n\n  // user 정보 받아오기\n  componentDidMount() { //컴포넌트가 만들어지고 render가 호출된 이후에 호출되는 메소드\n    let errorCheck = response => {\n      console.log(\"err cherk.\");\n      console.log(response);\n\n      if(!this.state.isCheck){\n        this.setState({\n          isCheck: true\n        });\n      }\n      if(!response.hasOwnProperty('error')&&!this.state.isLogin){\n        this.setState({\n          isLogin: true,\n          isMailAuthenticated: response.is_mail_authenticated,\n          username: response.username,\n          email: response.email,\n        });\n      }\n      return response;\n    } \n\n    let jwtErrorCheck = response => {\n       if(!response.ok){\n          this.deleteJWTToken();\n          Promise.reject(); //서버에서 jwt 토큰 유효시간 줄여서 테스트해보기\n       }\n       return response;\n    }\n    fetch('http://localhost/api/user', { // JWT 토큰이 저장되어 있는지, 그리고 저장되어 있다면 해당 JWT 토큰이 유효한지 확인\n      method: \"GET\",\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      credentials: 'include',\n    })\n    .then(res=>res.json())\n    .then(errorCheck)\n    .then(content=>{\n      if(this.state.isLogin){ // 사용자가 로그인 중일 때\n         fetch('http://localhost/api/jwt-refresh', { //JWT 토큰 재발급\n            method: \"POST\", \n            headers: {\n              'Content-Type' : 'application/json',\n            },\n            credentials: 'include',\n         })\n         .then(jwtErrorCheck)\n         .then(res=>res.json())\n         .then(content=>{\n            console.log(\"토큰이 재발급되었습니다.\");\n            console.log(content);\n            console.log(this.state);\n            this.props.history.push('/');\n         }).catch(error=>console.log('JWT 토큰 재발급 에러! 이미 만료된 토큰입니다.'));\n      }\n    }).catch(error=>console.log('로그인 체크 에러!'));\n \n  }\n\n  userStateChange = (authenticated, mailAuthenticated, username, email) => {\n    console.log(\"thisStateTest.\", this.state);\n    if((!this.state.isLogin||this.state.isLogin==false) && authenticated==true) localStorage.setItem('isLogin', true);\n    if((!this.state.isMailAuthenticated||this.state.isMailAuthenticated==false) && mailAuthenticated==true) localStorage.setItem('isMailAuthenticated', true);\n    if(email=='google'||email=='facebook'){ //소셜 로그인\n      this.setState({\n        isLogin: authenticated,\n        username: username,\n        isMailAuthenticated: true\n      });\n    }\n    else{\n      this.setState({\n        isLogin: authenticated,\n        isMailAuthenticated: mailAuthenticated,\n        username: username,\n        email: email\n      });\n    }\n  }\n\n  deleteJWTToken(){\n    let isTokenStored=true;\n    let tokenCheck = response => {\n      if(!response.ok){\n        isTokenStored=false;\n      }\n      return response;\n    }\n\n    try {\n      fetch('http://localhost/api/logout', {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n      })\n      .then(tokenCheck)\n      .then(res=>{\n        if(isTokenStored){\n          console.log(res);\n          this.setState({\n            isLogin: false,\n            isMailAuthenticated: false,\n            username: '',\n            userid: ''\n          });\n          console.log('Logged out successfully');\n          this.props.history.push(\"/login\");\n        }\n      });\n    \n    }catch{\n      console.log(\"error!\");\n      this.setState({\n        isLogin: false,\n        userid: ''\n      });\n      console.log('Logged out successfully');\n    }\n  }\n\n  // 로그아웃시 서버로 요청 보내서 JWT 토큰이 저장된 httponly 쿠키 제거\n  logout = () => {\n    console.log(\"logout called!\");\n    this.deleteJWTToken();\n  }\n\n  render() {\n    const childProps = {\n      username: this.state.username,\n      useremail: this.state.email,\n      isLogin: this.state.isLogin,\n      isMailAuthenticated:this.state.isMailAuthenticated,\n      userStateChange: this.userStateChange\n    };\n    console.log(\"child test.\");\n    console.log(childProps);\n    return (   \n       <Fragment>\n          { this.state && this.state.isLogin!=null &&\n          <NavBar        \n            isLogin={this.state.isLogin}\n            username={this.state.username}\n            logout={this.logout}\n          />\n          }\n          { this.state && this.state.isLogin!=null &&\n            <Route childProps={childProps}/>\n          }\n      </Fragment>\n    );\n  }\n}\n\n//export default App;\nexport default withRouter(App); //로그아웃 했을 때 로그인화면으로 리다이렉트하기 위해 바꿔준다.\n"]},"metadata":{},"sourceType":"module"}
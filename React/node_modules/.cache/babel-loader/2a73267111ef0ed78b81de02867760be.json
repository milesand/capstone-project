{"ast":null,"code":"import _classCallCheck from \"/home/hong/capstone-project/React/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/hong/capstone-project/React/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/hong/capstone-project/React/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/hong/capstone-project/React/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/hong/capstone-project/React/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/hong/capstone-project/React/src/App.js\";\nimport React, { Component } from \"react\";\nimport NavBar from \"./components/routing/Nav\";\nimport Routes from \"./Routes\";\nimport \"./App.css\";\nimport { withRouter } from \"react-router-dom\"; //로그아웃 했을 때 로그인 화면으로 리다이렉션하기 위해 import\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props)); //App 컴포넌트가 상속받은 Component가 지니고 있던 생성자를 super를 통해 미리 실행한다.\n\n    _this.userHasAuthenticated = function (authenticated, mailAuthenticated, username, email) {\n      if (email == 'google' || email == 'facebook') {\n        //소셜 로그인\n        _this.setState({\n          isAuthenticated: authenticated,\n          username: username,\n          isMailAuthenticated: true\n        });\n      } else {\n        _this.setState({\n          isAuthenticated: authenticated,\n          isMailAuthenticated: mailAuthenticated,\n          username: username,\n          email: email\n        });\n      }\n    };\n\n    _this.handleLogout = function () {\n      // 이 부분 이슈 잡아야 하는데, 사실 f5 리프레쉬 됐을때 구글 로그인 로직이 자동 호출되는 것만 막으면 됨\n      // Login.js -> handleGoogleSignIn() 함수\n      localStorage.removeItem('isLogin');\n      localStorage.removeItem('isMailAuthenticated');\n\n      try {\n        fetch('http://localhost/api/logout', {\n          method: \"POST\",\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          credentials: 'include'\n        }).then(function (res) {\n          console.log(res);\n\n          _this.setState({\n            isAuthenticated: false,\n            isMailAuthenticated: false,\n            username: '',\n            userid: ''\n          });\n\n          console.log('Logged out successfully');\n\n          _this.props.history.push(\"/login\");\n        });\n      } catch (_unused) {\n        console.log(\"error!\");\n\n        _this.setState({\n          isAuthenticated: false,\n          userid: ''\n        });\n\n        console.log('Logged out successfully');\n      }\n    };\n\n    console.log('App prop test.');\n    console.log(prop);\n    _this.state = {\n      //컴포넌트의 state 정의\n      username: \"\",\n      email: \"\",\n      isLogin: localStorage.getItem('isLogin') ? true : false,\n      isMailAuthenticated: localStorage.getItem('isMailAutenticated') ? true : false\n    };\n    return _this;\n  } // user가 로그인 중인지 확인하고, 로그인 중이라면 유저의 정보를 서버로부터 받아온다.\n\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      //컴포넌트가 만들어지고 render가 호출된 이후에 호출되는 메소드\n      console.log(\"initiate.\"); //로그인 체크 함수\n\n      var loginCheck = function loginCheck(response) {\n        if (!response.hasOwnProperty('error')) {\n          console.log(response);\n\n          _this2.setState({\n            username: response.username,\n            userid: response._id\n          });\n        }\n\n        return response;\n      }; //사용자가 로그인 상태인지 확인하기 위해 클라이언트에 HTTPonly jwt cookie가 저장되어 있는지 확인\n\n\n      fetch('http://localhost/api/user', {\n        method: \"GET\",\n        credentials: 'include'\n      }).then(function (res) {\n        return res.json();\n      }).then(loginCheck).then(function (json) {\n        // 브라우저에 JWT 쿠키가 존재하는 상황이라면 서버에 GET 요청하여 해당 access token이 유효한지 확인\n        if (_this2.state.isLogin) {\n          console.log(\"token test.\");\n          console.log(_this2.state);\n\n          var handleErrors = function handleErrors(response) {\n            if (!response.ok) {\n              throw Error(response.statusText);\n            }\n\n            return response;\n          };\n\n          var data = {\n            token: \"\" // JWT 토큰 값이 유효한지 확인하기 위해 /api/jwt-verify로 POST 리퀘스트를 보낸다.\n\n          };\n          fetch('http://localhost/api/jwt-verify', {\n            method: \"POST\",\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            credentials: 'include',\n            body: JSON.stringify(data)\n          }).then(function (res) {\n            fetch('http://localhost/api/user', {\n              method: \"GET\",\n              credentials: 'include'\n            }).then(handleErrors).then(function (res) {\n              return res.json();\n            }).then(function (json) {\n              // 현재 유저 정보 받아왔다면, 로그인 상태로 state 업데이트 하고\n              console.log(\"success!!!\");\n              console.log(json);\n\n              if (json.username) {\n                _this2.setState({\n                  username: json.username,\n                  email: json.email,\n                  isAuthenticated: true,\n                  isMailAuthenticated: json.is_mail_authenticated\n                }); //setState : 컴포넌트의 state를 변경한다. state를 변경하려면 setState를 무조건 거쳐야 한다.\n\n              }\n\n              console.log(_this2.state); // Refresh Token 발급 받아 token의 만료 시간 연장\n\n              fetch('http://localhost/api/jwt-refresh', {\n                //토큰 재발급관련\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(data),\n                credentials: 'include'\n              }).then(handleErrors).then(function (res) {\n                return res.json();\n              }).then(function (json) {\n                console.log(json);\n                console.log('Refresh Token 발급');\n                console.log(json.token);\n                console.log(_this2.state);\n\n                _this2.props.history.push('/'); //여기에 메인 페이지 URL 넣으면 됨\n\n              }).catch(function (error) {\n                console.log(error);\n              });\n              ;\n            }).catch(function (error) {\n              console.log(\"에러발생2!!!!!!!!\");\n\n              _this2.handleLogout();\n            });\n          }).catch(function (error) {\n            console.log(\"에러발생!!!!!!!!\");\n\n            _this2.handleLogout();\n          });\n        }\n      });\n    } // 새로운 User가 로그인 했다면 (서버로 부터 access token을 발급받았을 것이고) 해당 토큰을 localStorage에 저장\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var childProps = {\n        username: this.state.username,\n        useremail: this.state.email,\n        isAuthenticated: this.state.isAuthenticated,\n        isMailAuthenticated: this.state.isMailAuthenticated,\n        userHasAuthenticated: this.userHasAuthenticated\n      };\n      console.log(\"child test.\");\n      console.log(childProps);\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, React.createElement(NavBar, {\n        isAuthenticated: this.state.isAuthenticated,\n        username: this.state.username,\n        handleLogout: this.handleLogout,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }), React.createElement(Routes, {\n        childProps: childProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component); //export default App;\n\n\nexport default withRouter(App); //로그아웃 했을 때 로그인화면으로 리다이렉트하기 위해 바꿔준다.","map":{"version":3,"sources":["/home/hong/capstone-project/React/src/App.js"],"names":["React","Component","NavBar","Routes","withRouter","App","props","userHasAuthenticated","authenticated","mailAuthenticated","username","email","setState","isAuthenticated","isMailAuthenticated","handleLogout","localStorage","removeItem","fetch","method","headers","credentials","then","res","console","log","userid","history","push","prop","state","isLogin","getItem","loginCheck","response","hasOwnProperty","_id","json","handleErrors","ok","Error","statusText","data","token","body","JSON","stringify","is_mail_authenticated","catch","error","childProps","useremail"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport NavBar from \"./components/routing/Nav\";\nimport Routes from \"./Routes\";\nimport \"./App.css\";\nimport { withRouter } from \"react-router-dom\"; //로그아웃 했을 때 로그인 화면으로 리다이렉션하기 위해 import\n\nclass App extends Component {\n  constructor(props) {\n    super(props); //App 컴포넌트가 상속받은 Component가 지니고 있던 생성자를 super를 통해 미리 실행한다.\n    console.log('App prop test.');\n    console.log(prop);\n    this.state = { //컴포넌트의 state 정의\n      username: \"\",\n      email: \"\",\n      isLogin: localStorage.getItem('isLogin') ? true : false,\n      isMailAuthenticated: localStorage.getItem('isMailAutenticated') ? true : false\n    };\n\n  }\n\n  // user가 로그인 중인지 확인하고, 로그인 중이라면 유저의 정보를 서버로부터 받아온다.\n  componentDidMount() { //컴포넌트가 만들어지고 render가 호출된 이후에 호출되는 메소드\n    \n    console.log(\"initiate.\");\n\n    //로그인 체크 함수\n    let loginCheck = response => {\n      if(!response.hasOwnProperty('error')){\n        console.log(response);\n        this.setState({\n          username: response.username,\n          userid: response._id\n        });\n      }\n      return response;\n    }\n\n    //사용자가 로그인 상태인지 확인하기 위해 클라이언트에 HTTPonly jwt cookie가 저장되어 있는지 확인\n    fetch('http://localhost/api/user', {\n      method: \"GET\",\n      credentials: 'include',\n    })\n    .then(res=>res.json())\n    .then(loginCheck)\n    .then(json=>{\n      // 브라우저에 JWT 쿠키가 존재하는 상황이라면 서버에 GET 요청하여 해당 access token이 유효한지 확인\n      if (this.state.isLogin) {\n        console.log(\"token test.\");\n        console.log(this.state);\n        let handleErrors = response => {\n          if (!response.ok) {\n            throw Error(response.statusText);\n          }\n          return response;\n        }\n\n        let data={\n          token: \"\"\n        }\n\n        // JWT 토큰 값이 유효한지 확인하기 위해 /api/jwt-verify로 POST 리퀘스트를 보낸다.\n        fetch('http://localhost/api/jwt-verify', {\n          method: \"POST\",\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          credentials: 'include',\n          body: JSON.stringify(data)\n        })\n        .then(res => {\n          fetch('http://localhost/api/user', {\n            method: \"GET\",\n            credentials: 'include',\n          })\n          .then(handleErrors)\n          .then(res => res.json())\n          .then(json => {\n            // 현재 유저 정보 받아왔다면, 로그인 상태로 state 업데이트 하고\n            console.log(\"success!!!\");\n            console.log(json);\n            if (json.username) {\n              this.setState({ username: json.username,\n                              email: json.email,\n                              isAuthenticated: true,\n                              isMailAuthenticated: json.is_mail_authenticated}); //setState : 컴포넌트의 state를 변경한다. state를 변경하려면 setState를 무조건 거쳐야 한다.\n            }\n            console.log(this.state);\n            // Refresh Token 발급 받아 token의 만료 시간 연장\n            fetch('http://localhost/api/jwt-refresh', { //토큰 재발급관련\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(data),\n              credentials: 'include',\n            })\n            .then(handleErrors)\n            .then(res => res.json())\n            .then((json)=>{\n              console.log(json);\n\n              console.log('Refresh Token 발급');\n              console.log(json.token);\n              console.log(this.state);\n              this.props.history.push('/') //여기에 메인 페이지 URL 넣으면 됨\n            })\n            .catch(error => {\n\n              console.log(error);\n\n            });\n            ;\n\n\n          })\n          .catch(error => {\n            console.log(\"에러발생2!!!!!!!!\");\n            this.handleLogout();\n\n          });\n        })\n        .catch(error => {\n          console.log(\"에러발생!!!!!!!!\");\n          this.handleLogout();\n\n        });\n      }\n\n    });\n  }\n\n  // 새로운 User가 로그인 했다면 (서버로 부터 access token을 발급받았을 것이고) 해당 토큰을 localStorage에 저장\n  userHasAuthenticated = (authenticated, mailAuthenticated, username, email) => {\n    if(email=='google'||email=='facebook'){ //소셜 로그인\n      this.setState({\n        isAuthenticated: authenticated,\n        username: username,\n        isMailAuthenticated: true\n      });\n    }\n    else{\n      this.setState({\n        isAuthenticated: authenticated,\n        isMailAuthenticated: mailAuthenticated,\n        username: username,\n        email: email\n      });\n    }\n  }\n\n  // 로그인 상태였던 유저가 로그아웃을 시도한다면 토큰을 지움\n  handleLogout = () => {\n\n    // 이 부분 이슈 잡아야 하는데, 사실 f5 리프레쉬 됐을때 구글 로그인 로직이 자동 호출되는 것만 막으면 됨\n    // Login.js -> handleGoogleSignIn() 함수\n    localStorage.removeItem('isLogin');\n    localStorage.removeItem('isMailAuthenticated');\n    try {\n      fetch('http://localhost/api/logout', {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n      })\n      .then(res=>{\n        console.log(res);\n        this.setState({\n          isAuthenticated: false,\n          isMailAuthenticated: false,\n          username: '',\n          userid: ''\n        });\n        console.log('Logged out successfully');\n        this.props.history.push(\"/login\");\n      });\n    \n    }catch{\n      console.log(\"error!\");\n      this.setState({\n        isAuthenticated: false,\n        userid: ''\n      });\n      console.log('Logged out successfully');\n    }\n  }\n\n  render() {\n    const childProps = {\n      username: this.state.username,\n      useremail: this.state.email,\n      isAuthenticated: this.state.isAuthenticated,\n      isMailAuthenticated:this.state.isMailAuthenticated,\n      userHasAuthenticated: this.userHasAuthenticated\n    };\n    console.log(\"child test.\");\n    console.log(childProps);\n    return (\n      <div className=\"App\">\n        <NavBar\n          isAuthenticated={this.state.isAuthenticated}\n          username={this.state.username}\n          handleLogout={this.handleLogout}\n        />\n        <Routes childProps={childProps}/>\n      </div>\n    );\n  }\n}\n\n//export default App;\nexport default withRouter(App); //로그아웃 했을 때 로그인화면으로 리다이렉트하기 위해 바꿔준다.\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"/home/hong/capstone-project/React/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/hong/capstone-project/React/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/home/hong/capstone-project/React/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/hong/capstone-project/React/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/hong/capstone-project/React/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/hong/capstone-project/React/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/hong/capstone-project/React/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/hong/capstone-project/React/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/hong/capstone-project/React/src/containers/Signup.js\";\nimport React, { Component } from \"react\";\nimport SignupForm from \"../components/auth/SignupForm\"; // 회원가입할 때 사용하는 컴포넌트\n\nvar Signup =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Signup, _Component);\n\n  function Signup(props) {\n    var _this;\n\n    _classCallCheck(this, Signup);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Signup).call(this, props));\n\n    _this.isEnteredValid = function () {};\n\n    _this.handleChange = function (event) {\n      var target = null;\n\n      if (event.target.id == 'username') {\n        target = username_err_message;\n      } else if (event.target.id == 'password') {\n        target = 'password_valid';\n      } else if (event.target.id == 'password_val') {\n        target = 'password_val_valid';\n      } else if (event.target.id == 'email') {\n        target = 'email_valid';\n      } else if (event.target.id == 'phone') {\n        target = 'phone_valid';\n      }\n\n      console.log(target);\n\n      _this.setState(_defineProperty({}, event.target.id, event.target.value));\n\n      if (_this.validate(event.target.id)) {\n        console.log(\"check!!!\");\n\n        _this.setState({\n          '${target}': \"테스트입니다.\"\n        });\n      } else {\n        _this.setState({\n          '${target}': \"\"\n        });\n      }\n\n      console.log(_this.state.username_err_message);\n    };\n\n    _this.state = {\n      username: \"\",\n      username_err_message: \"\",\n      password: \"\",\n      password_valid: false,\n      password_val: \"\",\n      password_val_valid: false,\n      email: \"\",\n      email_valid: false,\n      phone: \"\",\n      phone_valid: false\n    };\n    return _this;\n  }\n\n  _createClass(Signup, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.isAuthenticated) {\n        this.props.history.push(\"/\");\n      }\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(id) {\n      //여기서 회원가입 필드들의 유효성 확인. 아이디 8자 이상, 비밀번호 8자 이상 15자 이하, 비밀번호와 비밀번호 확인필드 동일해야함.\n      //return (username && username.length >= 8) && (password) && (password==password_val);\n      var val = true;\n      var idPasswordTest = /^.*(?=^.{8,15}$)(?=.*\\d)(?=.*[a-zA-Z]).*$/;\n      var emailTest = /^[\\w-]+(\\.[\\w-]+)*@([a-z0-9-]+(\\.[a-z0-9-]+)*?\\.[a-z]{2,6}|(\\d{1,3}\\.){3}\\d{1,3})(:\\d{4})?$/;\n      var phoneNumberTest = /^\\d{3}-\\d{3,4}-\\d{4}$/;\n\n      if (id == 'username') {\n        if (!this.state.username || !idPasswordTest.test(this.state.username)) val = false;\n      } else if (id == 'password') {\n        if (!this.state.password || !idPasswordTest.test(this.state.password)) val = false;\n      } else if (id == 'password_val') {\n        if (!this.state.password_val || this.state.password != this.state.password_val) val = false;\n      } else if (id == 'email') {\n        if (!this.state.email || !emailTest.test(this.state.email)) val = false;\n      } else if (id == 'phone') {\n        if (this.state.phone && !phoneNumberTest.test(this.state.phone)) val = false;\n      }\n\n      return val;\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function () {\n      var _handleSubmit = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(submitEvent) {\n        var _this2 = this;\n\n        var data, handleErrors;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                data = {\n                  username: this.state.username,\n                  password: this.state.password,\n                  email: this.state.email,\n                  phone_num: this.state.phone,\n                  social_auth: \"\",\n                  is_mail_authenticated: false\n                };\n                console.log(\"data : \" + JSON.stringify(data));\n                submitEvent.preventDefault();\n\n                handleErrors = function handleErrors(response) {\n                  console.log(response);\n\n                  var msg = _this2.validate();\n\n                  if (!response.ok) {\n                    throw Error(msg);\n                  }\n\n                  return response;\n                };\n\n                fetch('http://localhost/api/register', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify(data)\n                }).then(handleErrors).then(function (res) {\n                  return res.json();\n                }).then(function (json) {\n                  console.log(json);\n\n                  if (json.user.username) {\n                    console.log(\"회원가입 완료!\");\n\n                    _this2.props.userHasAuthenticated(true, false, json.user.username, json.user.email); //회원가입 하고 바로 로그인 상태로 바뀌게 하고 싶을 때 사용\n\n\n                    var mailPage = function mailPage(response) {\n                      console.log(response);\n\n                      _this2.props.history.push('/mail-auth');\n\n                      return response;\n                    };\n\n                    var loginData = {\n                      username: _this2.state.username,\n                      password: _this2.state.password // 서버로부터 새로운 access token 발급받음\n\n                    };\n                    fetch('http://localhost/api/jwt-login', {\n                      //보통 fetch는 쿠키를 보내거나 받지 않는다. 쿠키를 전송하거나 받기 위해서는 credentials 옵션을 반드시 설정해야 한다.\n                      method: 'POST',\n                      headers: {\n                        'Content-Type': 'application/json'\n                      },\n                      credentials: 'include',\n                      //서버에 실을 때 수정\n                      body: JSON.stringify(loginData)\n                    }).then(function (res) {\n                      return res.json();\n                    }).then(mailPage);\n                  }\n                }).catch(function (error) {\n                  return alert(error);\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function handleSubmit(_x) {\n        return _handleSubmit.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(SignupForm, {\n        username: this.state.username,\n        username_err_message: this.state.username_err_message,\n        password: this.state.password,\n        password_val: this.state.password_val //비밀번호 확인 필드를 위해 추가\n        ,\n        handleChangeUsername: function handleChangeUsername(e) {\n          return _this3.handleChange(e);\n        },\n        handleChangePassword: function handleChangePassword(e) {\n          return _this3.handleChange(e);\n        },\n        handleChangePassword_val: function handleChangePassword_val(e) {\n          return _this3.handleChange(e);\n        },\n        handleChangeEmail: function handleChangeEmail(e) {\n          return _this3.handleChange(e);\n        },\n        handleChangePhone: function handleChangePhone(e) {\n          return _this3.handleChange(e);\n        },\n        handleSubmit: function handleSubmit(e) {\n          return _this3.handleSubmit(e);\n        },\n        validate: this.validateForm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Signup;\n}(Component);\n\nexport { Signup as default };","map":{"version":3,"sources":["/home/hong/capstone-project/React/src/containers/Signup.js"],"names":["React","Component","SignupForm","Signup","props","isEnteredValid","handleChange","event","target","id","username_err_message","console","log","setState","value","validate","state","username","password","password_valid","password_val","password_val_valid","email","email_valid","phone","phone_valid","isAuthenticated","history","push","val","idPasswordTest","emailTest","phoneNumberTest","test","submitEvent","data","phone_num","social_auth","is_mail_authenticated","JSON","stringify","preventDefault","handleErrors","response","msg","ok","Error","fetch","method","headers","body","then","res","json","user","userHasAuthenticated","mailPage","loginData","credentials","catch","error","alert","e","handleSubmit","validateForm"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport SignupForm from \"../components/auth/SignupForm\";\n\n// 회원가입할 때 사용하는 컴포넌트\nexport default class Signup extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      username: \"\",\n      username_err_message:\"\",\n      password: \"\",\n      password_valid:false,\n      password_val: \"\",\n      password_val_valid:false,\n      email: \"\",\n      email_valid:false,\n      phone: \"\",\n      phone_valid:false,\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.isAuthenticated) {\n      this.props.history.push(\"/\");\n    }\n  }\n\n  validate(id) { //여기서 회원가입 필드들의 유효성 확인. 아이디 8자 이상, 비밀번호 8자 이상 15자 이하, 비밀번호와 비밀번호 확인필드 동일해야함.\n    //return (username && username.length >= 8) && (password) && (password==password_val);\n    let val = true;\n    const idPasswordTest=/^.*(?=^.{8,15}$)(?=.*\\d)(?=.*[a-zA-Z]).*$/;\n    const emailTest=/^[\\w-]+(\\.[\\w-]+)*@([a-z0-9-]+(\\.[a-z0-9-]+)*?\\.[a-z]{2,6}|(\\d{1,3}\\.){3}\\d{1,3})(:\\d{4})?$/;\n    const phoneNumberTest = /^\\d{3}-\\d{3,4}-\\d{4}$/;\n    \n    if(id=='username'){\n      if(!this.state.username||!idPasswordTest.test(this.state.username)) val=false;\n    }\n    else if(id=='password'){\n      if(!this.state.password||!idPasswordTest.test(this.state.password)) val=false;\n    }\n    else if(id=='password_val'){\n      if(!this.state.password_val||this.state.password!=this.state.password_val) val=false;\n    }\n    else if(id=='email'){\n      if(!this.state.email||!emailTest.test(this.state.email)) val=false;\n    }\n    else if(id=='phone'){\n      if(this.state.phone&&!phoneNumberTest.test(this.state.phone)) val=false;\n    }\n    return val;\n  }\n\n  isEnteredValid = () =>{\n\n  }\n\n  handleChange = event => {\n    let target=null;\n    if(event.target.id=='username'){\n      target=username_err_message;\n    }\n    else if(event.target.id=='password'){\n      target='password_valid';\n    }\n    else if(event.target.id=='password_val'){\n      target='password_val_valid';\n    }\n    else if(event.target.id=='email'){\n      target='email_valid';\n    }\n    else if(event.target.id=='phone'){\n      target='phone_valid';\n    }\n\n    console.log(target);\n    this.setState({\n      [event.target.id]: event.target.value //SignupForm.js에서 정해놓은 input id값 및 value값\n    });\n    if(this.validate(event.target.id)){\n      console.log(\"check!!!\");\n      this.setState({\n        '${target}': \"테스트입니다.\"\n      });\n    }\n    else{\n      this.setState({\n        '${target}': \"\"\n      })\n    }\n    console.log(this.state.username_err_message);\n  }\n\n  async handleSubmit(submitEvent) {\n    let data = {\n      username: this.state.username,\n      password: this.state.password,\n      email: this.state.email,\n      phone_num: this.state.phone,\n      social_auth: \"\",\n      is_mail_authenticated: false,\n    };\n    \n    console.log(\"data : \" + JSON.stringify(data))\n    submitEvent.preventDefault();\n\n    let handleErrors = response => {\n      console.log(response);\n      let msg=this.validate();\n      if (!response.ok) {\n        throw Error(msg);\n      }\n      return response;\n    }\n\n    fetch('http://localhost/api/register', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    })\n    .then(handleErrors)\n    .then(res => res.json())\n    .then(json => {\n      console.log(json);\n      if (json.user.username) {\n        console.log(\"회원가입 완료!\");\n        this.props.userHasAuthenticated(true, false, json.user.username, json.user.email); //회원가입 하고 바로 로그인 상태로 바뀌게 하고 싶을 때 사용\n        let mailPage = response => {\n          console.log(response);\n          this.props.history.push('/mail-auth');\n          return response;\n        }\n    \n        let loginData={\n          username: this.state.username,\n          password: this.state.password\n        }\n        // 서버로부터 새로운 access token 발급받음\n        fetch('http://localhost/api/jwt-login', {\n          //보통 fetch는 쿠키를 보내거나 받지 않는다. 쿠키를 전송하거나 받기 위해서는 credentials 옵션을 반드시 설정해야 한다.\n          method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            credentials : 'include', //서버에 실을 때 수정\n            body: JSON.stringify(loginData)\n          })\n        .then(res => res.json())\n        .then(mailPage)\n      }\n    }).catch(error => alert(error));\n  }\n\n  render() {\n    return (\n      <SignupForm\n        username={this.state.username}\n        username_err_message={this.state.username_err_message}\n        password={this.state.password}\n        password_val={this.state.password_val} //비밀번호 확인 필드를 위해 추가\n        handleChangeUsername={e => this.handleChange(e)}\n        handleChangePassword={e => this.handleChange(e)}\n        handleChangePassword_val={e => this.handleChange(e)}\n        handleChangeEmail={e => this.handleChange(e)}\n        handleChangePhone={e => this.handleChange(e)}\n        handleSubmit={e => this.handleSubmit(e)}\n        validate={this.validateForm}\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
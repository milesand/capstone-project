{"ast":null,"code":"import _regeneratorRuntime from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/hong/PRTest/capstone-project/React/src/containers/App.js\";\nimport React, { Component, Fragment } from \"react\";\nimport NavBar from \"../components/AuthRoutingComponents/NavBar\";\nimport { withRouter } from \"react-router-dom\"; //로그아웃 했을 때 로그인 화면으로 리다이렉션하기 위해 import\n//라우팅용 모듈들\n\nimport { Route, Switch } from \"react-router-dom\";\nimport NormalRoute from \"../components/AuthRoutingComponents/NormalRoute\";\nimport AuthenticatedRoute from \"../components/AuthRoutingComponents/AuthenticatedRoute\";\nimport MailAuthRoute from \"../components/AuthRoutingComponents/MailAuthRoute\";\nimport ErrorPage from \"../components/LoginComponents/ErrorPage\";\nimport Home from \"./Home\";\nimport Login from \"./Login\";\nimport Signup from \"./Signup\";\nimport MailResend from \"./MailResend\";\nimport MailValidation from \"./MailValidation\";\nimport DownloadTest from \"./DownloadTest\";\nimport ForgotID from \"./ForgotID\";\nimport ForgotPassword from \"./ForgotPassword\";\nimport DisplayID from \"./DisplayID\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props)); //App 컴포넌트가 상속받은 Component가 지니고 있던 생성자를 super를 통해 미리 실행한다.\n\n    _this.userStateChange = function (authenticated, mailAuthenticated, username, email) {\n      console.log(\"thisStateTest.\", _this.state);\n\n      if (email == 'google' || email == 'facebook') {\n        //소셜 로그인\n        _this.setState({\n          isLogin: authenticated,\n          username: username,\n          isMailAuthenticated: true\n        });\n      } else {\n        _this.setState({\n          isLogin: authenticated,\n          isMailAuthenticated: mailAuthenticated,\n          username: username,\n          email: email\n        });\n      }\n    };\n\n    _this.logout = function () {\n      console.log(\"logout called!\");\n      var auth2 = window.gapi && window.gapi.auth2.getAuthInstance();\n      console.log(\"isSignedIN test : \", auth2.isSignedIn.get());\n      auth2.signOut().then(function () {\n        auth2.disconnect();\n        console.log(\"signOut complete.\", auth2.isSignedIn.get());\n      }).then(function () {\n        _this.deleteJWTToken();\n      }).then(function () {\n        _this.props.history.push(\"/login\");\n\n        console.log('Log out to login page.', _this.state);\n\n        _this.setState({\n          isLogout: false\n        });\n      });\n    };\n\n    console.log('App prop test.');\n    _this.state = {\n      //컴포넌트의 state 정의\n      username: \"\",\n      email: \"\",\n      isLogin: null,\n      //사용자가 로그인 상태인지 체크한 후에 bool 값이 할당됨.\n      isMailAuthenticated: null,\n      isLoading: false\n    };\n    console.log(_this.state);\n    _this.toggleLoading = _this.toggleLoading.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.userStateChange = _this.userStateChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"toggleLoading\",\n    value: function toggleLoading() {\n      console.log(\"toggle start. \", this);\n      this.setState = {\n        isLoading: !this.state.isLoading\n      };\n    } // user 정보 받아오기\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      //컴포넌트가 만들어지고 render가 호출된 이후에 호출되는 메소드\n      var errorCheck = function errorCheck(response) {\n        console.log(\"err check.\");\n        console.log(response);\n\n        if (!response.hasOwnProperty('error')) {\n          _this2.setState({\n            isLogin: true,\n            isMailAuthenticated: response.is_mail_authenticated,\n            username: response.username,\n            email: response.email\n          });\n        } else {\n          _this2.setState({\n            isLogin: false\n          });\n\n          _this2.deleteJWTToken();\n        }\n\n        console.log('wwwwwstate : ', _this2.state);\n        return response;\n      };\n\n      var jwtErrorCheck = function jwtErrorCheck(response) {\n        if (!response.ok) {\n          _this2.deleteJWTToken();\n\n          Promise.reject(); //서버에서 jwt 토큰 유효시간 줄여서 테스트해보기\n        }\n\n        return response;\n      };\n\n      if (this.state.username == '') {\n        fetch('http://localhost/api/user', {\n          // JWT 토큰이 저장되어 있는지, 그리고 저장되어 있다면 해당 JWT 토큰이 유효한지 확인\n          method: \"GET\",\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          credentials: 'include'\n        }).then(function (res) {\n          return res.json();\n        }).then(errorCheck).then(function (content) {\n          console.log(\"login? : \", _this2.state.isLogin);\n\n          if (_this2.state.isLogin) {\n            // 사용자가 로그인 중일 때\n            fetch('http://localhost/api/jwt-refresh', {\n              //JWT 토큰 재발급\n              method: \"POST\",\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              credentials: 'include'\n            }).then(jwtErrorCheck).then(function (res) {\n              return res.json();\n            }).then(function (content) {\n              console.log(\"토큰이 재발급되었습니다.\");\n              console.log(content);\n              console.log(_this2.state); //react-router-dom에서 알아서 이메일 인증 안받은사람 인증 페이지로 리다이렉션시키므로, 여기선 안해도됨.\n            }).catch(function (error) {\n              return console.log('JWT 토큰 재발급 에러!');\n            });\n          }\n        }).catch(function (error) {\n          return console.log('로그인 체크 에러!');\n        });\n      }\n    }\n  }, {\n    key: \"deleteJWTToken\",\n    value: function () {\n      var _deleteJWTToken = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _this3 = this;\n\n        var isTokenStored, tokenCheck;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log('JWT 토큰 제거중.');\n                isTokenStored = true;\n\n                tokenCheck = function tokenCheck(response) {\n                  if (!response.ok) {\n                    isTokenStored = false;\n                  }\n\n                  return response;\n                };\n\n                try {\n                  fetch('http://localhost/api/logout', {\n                    method: \"POST\",\n                    headers: {\n                      'Content-Type': 'application/json'\n                    },\n                    credentials: 'include'\n                  }).then(tokenCheck).then(function (res) {\n                    if (isTokenStored) {\n                      console.log(res);\n\n                      _this3.setState(function (state) {\n                        return {\n                          isLogin: false,\n                          isMailAuthenticated: false,\n                          username: '',\n                          email: ''\n                        };\n                      });\n                    }\n                  }).then(function (data) {\n                    console.log('True Log out.', _this3.state);\n                  });\n                } catch (_unused) {\n                  console.log(\"error!\");\n                  this.setState({\n                    isLogin: false,\n                    userid: ''\n                  });\n                  console.log('Log out.');\n                }\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function deleteJWTToken() {\n        return _deleteJWTToken.apply(this, arguments);\n      };\n    }() // 로그아웃시 서버로 요청 보내서 JWT 토큰이 저장된 httponly 쿠키 제거\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var baseProps = {\n        username: this.state.username,\n        useremail: this.state.email,\n        isLogin: this.state.isLogin,\n        isMailAuthenticated: this.state.isMailAuthenticated,\n        isLoading: this.state.isLoading,\n        toggleLoading: this.toggleLoading,\n        userStateChange: this.userStateChange\n      };\n      console.log(\"base test.\", baseProps);\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, this.state && this.state.isLogin != null && React.createElement(NavBar, {\n        isLogin: this.state.isLogin,\n        username: this.state.username,\n        isLogout: this.state.isLogout,\n        logout: this.logout,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }), this.state && this.state.isLogin != null && React.createElement(Switch, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, React.createElement(AuthenticatedRoute, {\n        path: \"/\",\n        exact: true,\n        component: Home,\n        props: baseProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }), React.createElement(NormalRoute, {\n        path: \"/login\",\n        exact: true,\n        component: Login,\n        props: baseProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }), React.createElement(NormalRoute, {\n        path: \"/signup\",\n        exact: true,\n        component: Signup,\n        props: baseProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }), React.createElement(MailAuthRoute, {\n        path: \"/mail-resend\",\n        exact: true,\n        component: MailResend,\n        props: baseProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }), React.createElement(NormalRoute, {\n        path: \"/mail-validation/*\",\n        exact: true,\n        component: MailValidation,\n        props: baseProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }), React.createElement(NormalRoute, {\n        path: \"/download-test/\",\n        exact: true,\n        component: DownloadTest,\n        props: baseProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }), React.createElement(NormalRoute, {\n        path: \"/forgot-id\",\n        exact: true,\n        component: ForgotID,\n        props: baseProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }), React.createElement(NormalRoute, {\n        path: \"/forgot-password\",\n        exact: true,\n        component: ForgotPassword,\n        props: baseProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }), React.createElement(NormalRoute, {\n        path: \"/display-id\",\n        exact: true,\n        component: DisplayID,\n        props: baseProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }), React.createElement(Route, {\n        component: ErrorPage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(Component); //export default App;\n\n\nexport default withRouter(App); //로그아웃 했을 때 로그인화면으로 리다이렉트하기 위해 바꿔준다.","map":{"version":3,"sources":["/home/hong/PRTest/capstone-project/React/src/containers/App.js"],"names":["React","Component","Fragment","NavBar","withRouter","Route","Switch","NormalRoute","AuthenticatedRoute","MailAuthRoute","ErrorPage","Home","Login","Signup","MailResend","MailValidation","DownloadTest","ForgotID","ForgotPassword","DisplayID","App","props","userStateChange","authenticated","mailAuthenticated","username","email","console","log","state","setState","isLogin","isMailAuthenticated","logout","auth2","window","gapi","getAuthInstance","isSignedIn","get","signOut","then","disconnect","deleteJWTToken","history","push","isLogout","isLoading","toggleLoading","bind","errorCheck","response","hasOwnProperty","is_mail_authenticated","jwtErrorCheck","ok","Promise","reject","fetch","method","headers","credentials","res","json","content","catch","error","isTokenStored","tokenCheck","data","userid","baseProps","useremail"],"mappings":"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","sourcesContent":["import React, { Component, Fragment} from \"react\";\nimport NavBar from \"../components/AuthRoutingComponents/NavBar\";\nimport { withRouter } from \"react-router-dom\"; //로그아웃 했을 때 로그인 화면으로 리다이렉션하기 위해 import\n\n//라우팅용 모듈들\nimport { Route, Switch } from \"react-router-dom\";\nimport NormalRoute from \"../components/AuthRoutingComponents/NormalRoute\";\nimport AuthenticatedRoute from \"../components/AuthRoutingComponents/AuthenticatedRoute\";\nimport MailAuthRoute from \"../components/AuthRoutingComponents/MailAuthRoute\";\nimport ErrorPage from \"../components/LoginComponents/ErrorPage\";\nimport Home from \"./Home\";\nimport Login from \"./Login\";\nimport Signup from \"./Signup\";\nimport MailResend from \"./MailResend\";\nimport MailValidation from \"./MailValidation\";\nimport DownloadTest from \"./DownloadTest\";\nimport ForgotID from \"./ForgotID\";\nimport ForgotPassword from \"./ForgotPassword\";\nimport DisplayID from \"./DisplayID\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props); //App 컴포넌트가 상속받은 Component가 지니고 있던 생성자를 super를 통해 미리 실행한다.\n    console.log('App prop test.');\n    this.state = { //컴포넌트의 state 정의\n      username: \"\",\n      email: \"\",\n      isLogin: null, //사용자가 로그인 상태인지 체크한 후에 bool 값이 할당됨.\n      isMailAuthenticated: null,\n      isLoading: false\n    };\n    console.log(this.state);\n    this.toggleLoading=this.toggleLoading.bind(this);\n    this.userStateChange=this.userStateChange.bind(this);\n  }\n\n  toggleLoading(){\n    console.log(\"toggle start. \", this);\n    this.setState=({\n      isLoading: !this.state.isLoading\n    });\n  }\n\n  // user 정보 받아오기\n  componentDidMount() { //컴포넌트가 만들어지고 render가 호출된 이후에 호출되는 메소드\n    let errorCheck = response => {\n      console.log(\"err check.\");\n      console.log(response);\n      if(!response.hasOwnProperty('error')){\n        this.setState({\n          isLogin: true,\n          isMailAuthenticated: response.is_mail_authenticated,\n          username: response.username,\n          email: response.email,\n        });\n      }\n      else{\n        this.setState({\n          isLogin: false,\n        });\n        this.deleteJWTToken();\n      }\n      console.log('wwwwwstate : ', this.state);\n      return response;\n    } \n\n    let jwtErrorCheck = response => {\n       if(!response.ok){\n          this.deleteJWTToken();\n          Promise.reject(); //서버에서 jwt 토큰 유효시간 줄여서 테스트해보기\n       }\n       return response;\n    }\n    \n    if(this.state.username==''){\n      fetch('http://localhost/api/user', { // JWT 토큰이 저장되어 있는지, 그리고 저장되어 있다면 해당 JWT 토큰이 유효한지 확인\n        method: \"GET\",\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n      })\n      .then(res=>res.json())\n      .then(errorCheck)\n      .then(content=>{\n        console.log(\"login? : \", this.state.isLogin);\n        if(this.state.isLogin){ // 사용자가 로그인 중일 때\n          fetch('http://localhost/api/jwt-refresh', { //JWT 토큰 재발급\n              method: \"POST\", \n              headers: {\n                'Content-Type' : 'application/json',\n              },\n              credentials: 'include',\n          })\n          .then(jwtErrorCheck)\n          .then(res=>res.json())\n          .then(content=>{\n              console.log(\"토큰이 재발급되었습니다.\");\n              console.log(content);\n              console.log(this.state);\n              //react-router-dom에서 알아서 이메일 인증 안받은사람 인증 페이지로 리다이렉션시키므로, 여기선 안해도됨.\n          }).catch(error=>console.log('JWT 토큰 재발급 에러!'));\n        }\n      }).catch(error=>console.log('로그인 체크 에러!'));\n    }\n  }\n\n  userStateChange = (authenticated, mailAuthenticated, username, email) => {\n    console.log(\"thisStateTest.\", this.state);\n    if(email=='google'||email=='facebook'){ //소셜 로그인\n      this.setState({\n        isLogin: authenticated,\n        username: username,\n        isMailAuthenticated: true\n      });\n    }\n    else{\n      this.setState({\n        isLogin: authenticated,\n        isMailAuthenticated: mailAuthenticated,\n        username: username,\n        email: email\n      });\n    }\n  }\n\n  async deleteJWTToken(){\n    console.log('JWT 토큰 제거중.');\n    let isTokenStored=true;\n    let tokenCheck = response => {\n      if(!response.ok){\n        isTokenStored=false;\n      }\n      return response;\n    }\n\n    try {\n      fetch('http://localhost/api/logout', {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n      })\n      .then(tokenCheck)\n      .then(res=>{\n        if(isTokenStored){\n          console.log(res);\n          this.setState(state => {\n            return{\n              isLogin: false,\n              isMailAuthenticated: false,\n              username: '',\n              email: '',\n            }\n          });\n          \n        }\n      })\n      .then(data => {\n        console.log('True Log out.', this.state);\n      });\n    \n    }catch{\n      console.log(\"error!\");\n      this.setState({\n        isLogin: false,\n        userid: ''\n      });\n      console.log('Log out.');\n    }\n  }\n\n  // 로그아웃시 서버로 요청 보내서 JWT 토큰이 저장된 httponly 쿠키 제거\n  logout = () => {\n    console.log(\"logout called!\");\n    let auth2 = window.gapi && window.gapi.auth2.getAuthInstance();\n    console.log(\"isSignedIN test : \", auth2.isSignedIn.get());\n    auth2.signOut()\n    .then(function () {\n      auth2.disconnect();\n      console.log(\"signOut complete.\", auth2.isSignedIn.get());\n    })\n    .then(() => {\n      this.deleteJWTToken();\n    })\n    .then(() => {\n      this.props.history.push(\"/login\");\n      console.log('Log out to login page.', this.state);\n      this.setState({\n        isLogout: false\n      });\n    });  \n  }\n\n  render() {\n    const baseProps = {\n      username: this.state.username,\n      useremail: this.state.email,\n      isLogin: this.state.isLogin,\n      isMailAuthenticated:this.state.isMailAuthenticated,\n      isLoading: this.state.isLoading,\n      toggleLoading: this.toggleLoading,\n      userStateChange: this.userStateChange,\n    };\n\n    console.log(\"base test.\", baseProps);\n    return (   \n       <Fragment>\n         \n          \n          { this.state && this.state.isLogin!=null &&\n          <NavBar        \n            isLogin={this.state.isLogin}\n            username={this.state.username}\n            isLogout={this.state.isLogout}\n            logout={this.logout}\n          />\n          }\n          { this.state && this.state.isLogin!=null &&\n            <Switch>\n              <AuthenticatedRoute path=\"/\" exact component={Home} props={baseProps} />\n              <NormalRoute path=\"/login\" exact component={Login} props={baseProps} />\n              <NormalRoute path=\"/signup\" exact component={Signup} props={baseProps} />\n              <MailAuthRoute path=\"/mail-resend\" exact component={MailResend} props={baseProps} />\n              <NormalRoute path=\"/mail-validation/*\" exact component={MailValidation} props={baseProps} />\n              <NormalRoute path=\"/download-test/\" exact component={DownloadTest} props={baseProps} />\n              <NormalRoute path=\"/forgot-id\" exact component={ForgotID} props={baseProps} />\n              <NormalRoute path=\"/forgot-password\" exact component={ForgotPassword} props={baseProps} />\n              <NormalRoute path=\"/display-id\" exact component={DisplayID} props={baseProps} />\n              <Route component={ErrorPage} />\n            </Switch>\n          }\n      </Fragment>\n    );\n  }\n}\n\n//export default App;\nexport default withRouter(App); //로그아웃 했을 때 로그인화면으로 리다이렉트하기 위해 바꿔준다.\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"/home/hong/capstone-project/React/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/hong/capstone-project/React/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/hong/capstone-project/React/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/hong/capstone-project/React/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/hong/capstone-project/React/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/hong/capstone-project/React/src/App.js\";\nimport React, { Component } from \"react\";\nimport NavBar from \"./components/routing/Nav\";\nimport Routes from \"./Routes\";\nimport \"./App.css\";\nimport { withRouter } from \"react-router-dom\"; //로그아웃 했을 때 로그인 화면으로 리다이렉션하기 위해 import\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props)); //App 컴포넌트가 상속받은 Component가 지니고 있던 생성자를 super를 통해 미리 실행한다.\n\n    _this.userHasAuthenticated = function (authenticated, mailAuthenticated, username, email) {\n      if (email == 'google' || email == 'facebook') {\n        //소셜 로그인\n        _this.setState({\n          isAuthenticated: authenticated,\n          username: username,\n          isMailAuthenticated: true\n        });\n      } else {\n        _this.setState({\n          isAuthenticated: authenticated,\n          isMailAuthenticated: mailAuthenticated,\n          username: username,\n          email: email\n        });\n      }\n    };\n\n    _this.handleLogout = function () {\n      localStorage.removeItem('isLogin');\n      localStorage.removeItem('isMailAuthenticated');\n\n      _this.deleteJWTToken();\n    };\n\n    console.log('App prop test.');\n    _this.state = {\n      //컴포넌트의 state 정의\n      username: \"\",\n      email: \"\",\n      isAuthenticated: localStorage.getItem('isLogin') ? true : false,\n      isMailAuthenticated: localStorage.getItem('isMailAuthenticated') ? true : false\n    };\n    console.log(_this.state);\n    return _this;\n  } // user 정보 받아오기\n\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      //컴포넌트가 만들어지고 render가 호출된 이후에 호출되는 메소드\n      console.log(\"initiate.\"); //로그인 체크 함수\n\n      var loginCheck = function loginCheck(response) {\n        console.log(\"loginCheck test.\");\n        console.log(response);\n\n        if (!response.hasOwnProperty('error')) {\n          console.log(response);\n\n          _this2.setState({\n            username: response.username,\n            userid: response._id\n          });\n        } else {\n          //로그아웃 상태인데 JWT 토큰 쿠키가 남아있는 경우 삭제\n          _this2.deleteJWTToken();\n        }\n\n        return response;\n      }; //사용자가 로그인 상태인지 확인하기 위해 클라이언트에 HTTPonly jwt cookie가 저장되어 있는지 확인\n\n\n      fetch('http://localhost/api/user', {\n        method: \"GET\",\n        credentials: 'include'\n      }).then(function (res) {\n        return res.json();\n      }).then(loginCheck).then(function (json) {\n        // 브라우저에 JWT 쿠키가 존재하는 상황이라면 서버에 GET 요청하여 해당 access token이 유효한지 확인\n        console.log(\"login check.\");\n        console.log(_this2.state);\n\n        if (_this2.state.isAuthenticated) {\n          console.log(\"token test.\");\n          console.log(_this2.state);\n\n          var handleErrors = function handleErrors(response) {\n            if (!response.ok) {\n              throw Error(response.statusText);\n            }\n\n            return response;\n          };\n\n          var data = {\n            token: \"\" // JWT 토큰 값이 유효한지 확인하기 위해 /api/jwt-verify로 POST 리퀘스트를 보낸다.\n\n          };\n          fetch('http://localhost/api/jwt-verify', {\n            method: \"POST\",\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            credentials: 'include',\n            body: JSON.stringify(data)\n          }).then(function (res) {\n            fetch('http://localhost/api/user', {\n              method: \"GET\",\n              credentials: 'include'\n            }).then(handleErrors).then(function (res) {\n              return res.json();\n            }).then(function (json) {\n              // 현재 유저 정보 받아왔다면, 로그인 상태로 state 업데이트 하고\n              console.log(\"success!!!\");\n              console.log(json);\n\n              if (json.username) {\n                _this2.setState({\n                  username: json.username,\n                  email: json.email,\n                  isAuthenticated: true,\n                  isMailAuthenticated: json.is_mail_authenticated\n                }); //setState : 컴포넌트의 state를 변경한다. state를 변경하려면 setState를 무조건 거쳐야 한다.\n\n              }\n\n              console.log(_this2.state); // Refresh Token 발급 받아 token의 만료 시간 연장\n\n              fetch('http://localhost/api/jwt-refresh', {\n                //토큰 재발급관련\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(data),\n                credentials: 'include'\n              }).then(handleErrors).then(function (res) {\n                return res.json();\n              }).then(function (json) {\n                console.log(json);\n                console.log('Refresh Token 발급');\n                console.log(json.token);\n                console.log(_this2.state);\n\n                _this2.props.history.push('/'); //여기에 메인 페이지 URL 넣으면 됨\n\n              }).catch(function (error) {\n                console.log(error);\n              });\n              ;\n            }).catch(function (error) {\n              console.log(\"에러발생2!!!!!!!!\");\n\n              _this2.handleLogout();\n            });\n          }).catch(function (error) {\n            console.log(\"에러발생!!!!!!!!\");\n\n            _this2.handleLogout();\n          });\n        }\n      });\n    }\n  }, {\n    key: \"deleteJWTToken\",\n    value: function deleteJWTToken() {\n      var _this3 = this;\n\n      var isTokenStored = true;\n\n      var tokenCheck = function tokenCheck(response) {\n        if (!response.ok) {\n          isTokenStored = false;\n        }\n\n        return response;\n      };\n\n      try {\n        fetch('http://localhost/api/logout', {\n          method: \"POST\",\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          credentials: 'include'\n        }).then(tokenCheck).then(function (res) {\n          if (isTokenStored) {\n            console.log(res);\n\n            _this3.setState({\n              isAuthenticated: false,\n              isMailAuthenticated: false,\n              username: '',\n              userid: ''\n            });\n\n            console.log('Logged out successfully');\n\n            _this3.props.history.push(\"/login\");\n          }\n        });\n      } catch (_unused) {\n        console.log(\"error!\");\n        this.setState({\n          isAuthenticated: false,\n          userid: ''\n        });\n        console.log('Logged out successfully');\n      }\n    } // 로그아웃시 서버로 요청 보내서 JWT 토큰이 저장된 httponly 쿠키 제거\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var childProps = {\n        username: this.state.username,\n        useremail: this.state.email,\n        isAuthenticated: this.state.isAuthenticated,\n        isMailAuthenticated: this.state.isMailAuthenticated,\n        userHasAuthenticated: this.userHasAuthenticated\n      };\n      console.log(\"child test.\");\n      console.log(childProps);\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, React.createElement(NavBar, {\n        isAuthenticated: this.state.isAuthenticated,\n        username: this.state.username,\n        handleLogout: this.handleLogout,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }), React.createElement(Routes, {\n        childProps: childProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component); //export default App;\n\n\nexport default withRouter(App); //로그아웃 했을 때 로그인화면으로 리다이렉트하기 위해 바꿔준다.","map":{"version":3,"sources":["/home/hong/capstone-project/React/src/App.js"],"names":["React","Component","NavBar","Routes","withRouter","App","props","userHasAuthenticated","authenticated","mailAuthenticated","username","email","setState","isAuthenticated","isMailAuthenticated","handleLogout","localStorage","removeItem","deleteJWTToken","console","log","state","getItem","loginCheck","response","hasOwnProperty","userid","_id","fetch","method","credentials","then","res","json","handleErrors","ok","Error","statusText","data","token","headers","body","JSON","stringify","is_mail_authenticated","history","push","catch","error","isTokenStored","tokenCheck","childProps","useremail"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport NavBar from \"./components/routing/Nav\";\nimport Routes from \"./Routes\";\nimport \"./App.css\";\nimport { withRouter } from \"react-router-dom\"; //로그아웃 했을 때 로그인 화면으로 리다이렉션하기 위해 import\n\nclass App extends Component {\n  constructor(props) {\n    super(props); //App 컴포넌트가 상속받은 Component가 지니고 있던 생성자를 super를 통해 미리 실행한다.\n    console.log('App prop test.');\n    this.state = { //컴포넌트의 state 정의\n      username: \"\",\n      email: \"\",\n      isAuthenticated: localStorage.getItem('isLogin') ? true : false,\n      isMailAuthenticated: localStorage.getItem('isMailAuthenticated') ? true : false\n    };\n    console.log(this.state);\n  }\n\n  // user 정보 받아오기\n  componentDidMount() { //컴포넌트가 만들어지고 render가 호출된 이후에 호출되는 메소드\n    \n    console.log(\"initiate.\");\n\n    //로그인 체크 함수\n    let loginCheck = response => {\n      console.log(\"loginCheck test.\");\n      console.log(response);\n      if(!response.hasOwnProperty('error')){\n        console.log(response);\n        this.setState({\n          username: response.username,\n          userid: response._id\n        });\n      }\n      else{ //로그아웃 상태인데 JWT 토큰 쿠키가 남아있는 경우 삭제\n        this.deleteJWTToken();\n      }\n      return response;\n    }\n\n    //사용자가 로그인 상태인지 확인하기 위해 클라이언트에 HTTPonly jwt cookie가 저장되어 있는지 확인\n    fetch('http://localhost/api/user', {\n      method: \"GET\",\n      credentials: 'include',\n    })\n    .then(res=>res.json())\n    .then(loginCheck)\n    .then(json=>{\n      // 브라우저에 JWT 쿠키가 존재하는 상황이라면 서버에 GET 요청하여 해당 access token이 유효한지 확인\n      console.log(\"login check.\");\n      console.log(this.state);\n      if (this.state.isAuthenticated) {\n        console.log(\"token test.\");\n        console.log(this.state);\n        let handleErrors = response => {\n          if (!response.ok) {\n            throw Error(response.statusText);\n          }\n          return response;\n        }\n\n        let data={\n          token: \"\"\n        }\n\n        // JWT 토큰 값이 유효한지 확인하기 위해 /api/jwt-verify로 POST 리퀘스트를 보낸다.\n        fetch('http://localhost/api/jwt-verify', {\n          method: \"POST\",\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          credentials: 'include',\n          body: JSON.stringify(data)\n        })\n        .then(res => {\n          fetch('http://localhost/api/user', {\n            method: \"GET\",\n            credentials: 'include',\n          })\n          .then(handleErrors)\n          .then(res => res.json())\n          .then(json => {\n            // 현재 유저 정보 받아왔다면, 로그인 상태로 state 업데이트 하고\n            console.log(\"success!!!\");\n            console.log(json);\n            if (json.username) {\n              this.setState({ username: json.username,\n                              email: json.email,\n                              isAuthenticated: true,\n                              isMailAuthenticated: json.is_mail_authenticated}); //setState : 컴포넌트의 state를 변경한다. state를 변경하려면 setState를 무조건 거쳐야 한다.\n            }\n            console.log(this.state);\n            // Refresh Token 발급 받아 token의 만료 시간 연장\n            fetch('http://localhost/api/jwt-refresh', { //토큰 재발급관련\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(data),\n              credentials: 'include',\n            })\n            .then(handleErrors)\n            .then(res => res.json())\n            .then((json)=>{\n              console.log(json);\n\n              console.log('Refresh Token 발급');\n              console.log(json.token);\n              console.log(this.state);\n              this.props.history.push('/') //여기에 메인 페이지 URL 넣으면 됨\n            })\n            .catch(error => {\n\n              console.log(error);\n\n            });\n            ;\n\n\n          })\n          .catch(error => {\n            console.log(\"에러발생2!!!!!!!!\");\n            this.handleLogout();\n\n          });\n        })\n        .catch(error => {\n          console.log(\"에러발생!!!!!!!!\");\n          this.handleLogout();\n\n        });\n      }\n    });\n  }\n\n  userHasAuthenticated = (authenticated, mailAuthenticated, username, email) => {\n    if(email=='google'||email=='facebook'){ //소셜 로그인\n      this.setState({\n        isAuthenticated: authenticated,\n        username: username,\n        isMailAuthenticated: true\n      });\n    }\n    else{\n      this.setState({\n        isAuthenticated: authenticated,\n        isMailAuthenticated: mailAuthenticated,\n        username: username,\n        email: email\n      });\n    }\n  }\n\n  deleteJWTToken(){\n    let isTokenStored=true;\n    let tokenCheck = response => {\n      if(!response.ok){\n        isTokenStored=false;\n      }\n      return response;\n    }\n\n    try {\n      fetch('http://localhost/api/logout', {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n      })\n      .then(tokenCheck)\n      .then(res=>{\n        if(isTokenStored){\n          console.log(res);\n          this.setState({\n            isAuthenticated: false,\n            isMailAuthenticated: false,\n            username: '',\n            userid: ''\n          });\n          console.log('Logged out successfully');\n          this.props.history.push(\"/login\");\n        }\n      });\n    \n    }catch{\n      console.log(\"error!\");\n      this.setState({\n        isAuthenticated: false,\n        userid: ''\n      });\n      console.log('Logged out successfully');\n    }\n  }\n  // 로그아웃시 서버로 요청 보내서 JWT 토큰이 저장된 httponly 쿠키 제거\n  handleLogout = () => {\n    localStorage.removeItem('isLogin');\n    localStorage.removeItem('isMailAuthenticated');\n    this.deleteJWTToken();\n  }\n\n  render() {\n    const childProps = {\n      username: this.state.username,\n      useremail: this.state.email,\n      isAuthenticated: this.state.isAuthenticated,\n      isMailAuthenticated:this.state.isMailAuthenticated,\n      userHasAuthenticated: this.userHasAuthenticated\n    };\n    console.log(\"child test.\");\n    console.log(childProps);\n    return (\n      <div className=\"App\">\n          <NavBar\n          isAuthenticated={this.state.isAuthenticated}\n          username={this.state.username}\n          handleLogout={this.handleLogout}\n        />\n        <Routes childProps={childProps}/>\n      </div>\n    );\n  }\n}\n\n//export default App;\nexport default withRouter(App); //로그아웃 했을 때 로그인화면으로 리다이렉트하기 위해 바꿔준다.\n"]},"metadata":{},"sourceType":"module"}
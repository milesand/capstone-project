{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\sungs\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\sungs\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\sungs\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\sungs\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\sungs\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\sungs\\\\frontend\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport NavBar from \"./components/routing/Nav\";\nimport Routes from \"./Routes\";\nimport \"./App.css\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.userHasAuthenticated = function (authenticated, username, token) {\n      _this.setState({\n        isAuthenticated: authenticated,\n        username: username\n      });\n\n      console.log(token);\n      localStorage.setItem('token', token);\n    };\n\n    _this.handleLogout = function () {\n      // 이 부분 이슈 잡아야 하는데, 사실 f5 리프레쉬 됐을때 구글 로그인 로직이 자동 호출되는 것만 막으면 됨\n      // Login.js -> handleGoogleSignIn() 함수\n      try {\n        window.gapi && window.gapi.auth2.getAuthInstance().signOut().then(function () {\n          _this.setState({\n            isAuthenticated: false,\n            username: ''\n          });\n\n          localStorage.removeItem('token');\n          console.log('Logged out successfully');\n        });\n      } catch (_unused) {\n        _this.setState({\n          isAuthenticated: false,\n          username: ''\n        });\n\n        localStorage.removeItem('token');\n        console.log('Logged out successfully');\n      }\n    };\n\n    _this.state = {\n      username: null,\n      isAuthenticated: localStorage.getItem('token') ? true : false\n    };\n    return _this;\n  } // user가 로그인 중인지 확인하고, 로그인 중이라면 유저의 정보를 서버로부터 받아온다.\n\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      console.log(this.state); // 토큰(access token)이 이미 존재하는 상황이라면 서버에 GET /validate 요청하여 해당 access token이 유효한지 확인\n\n      if (this.state.isAuthenticated) {\n        var handleErrors = function handleErrors(response) {\n          if (!response.ok) {\n            throw Error(response.statusText);\n          }\n\n          return response;\n        }; // 현재 JWT 토큰 값이 타당한지 GET /validate 요청을 통해 확인하고\n        // 상태 코드가 200이라면 현재 GET /user/current 요청을 통해 user정보를 받아옴\n\n\n        fetch('http://localhost:8000/validate/', {\n          headers: {\n            Authorization: \"JWT \".concat(localStorage.getItem('token'))\n          }\n        }).then(function (res) {\n          fetch('http://localhost:8000/user/current', {\n            headers: {\n              Authorization: \"JWT \".concat(localStorage.getItem('token'))\n            }\n          }).then(handleErrors).then(function (res) {\n            return res.json();\n          }).then(function (json) {\n            // 현재 유저 정보 받아왔다면, 로그인 상태로 state 업데이트 하고\n            if (json.username) {\n              _this2.setState({\n                username: json.username\n              });\n            } // Refresh Token 발급 받아 token의 만료 시간 연장\n\n\n            fetch('http://localhost:8000/refresh/', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                token: localStorage.getItem('token')\n              })\n            }).then(handleErrors).then(function (res) {\n              return res.json();\n            }).then(function (json) {\n              _this2.userHasAuthenticated(true, json.user.username, json.token);\n\n              console.log('Refresh Token 발급');\n              console.log(json.token);\n            }).catch(function (error) {\n              console.log(error);\n            });\n            ;\n          }).catch(function (error) {\n            _this2.handleLogout();\n          });\n        }).catch(function (error) {\n          _this2.handleLogout();\n        });\n      }\n    } // 새로운 User가 로그인 했다면 (서버로 부터 access token을 발급받았을 것이고) 해당 토큰을 localStorage에 저장\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var childProps = {\n        username: this.state.username,\n        isAuthenticated: this.state.isAuthenticated,\n        userHasAuthenticated: this.userHasAuthenticated\n      };\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, React.createElement(NavBar, {\n        isAuthenticated: this.state.isAuthenticated,\n        username: this.state.username,\n        handleLogout: this.handleLogout,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }), React.createElement(Routes, {\n        childProps: childProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\sungs\\frontend\\src\\App.js"],"names":["React","Component","NavBar","Routes","App","props","userHasAuthenticated","authenticated","username","token","setState","isAuthenticated","console","log","localStorage","setItem","handleLogout","window","gapi","auth2","getAuthInstance","signOut","then","removeItem","state","getItem","handleErrors","response","ok","Error","statusText","fetch","headers","Authorization","res","json","method","body","JSON","stringify","user","catch","error","childProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport NavBar from \"./components/routing/Nav\";\nimport Routes from \"./Routes\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      username: null,\n      isAuthenticated: localStorage.getItem('token') ? true : false\n    };\n  }\n\n  // user가 로그인 중인지 확인하고, 로그인 중이라면 유저의 정보를 서버로부터 받아온다.\n  componentDidMount() {\n    console.log(this.state);\n    // 토큰(access token)이 이미 존재하는 상황이라면 서버에 GET /validate 요청하여 해당 access token이 유효한지 확인\n    if (this.state.isAuthenticated) {\n\n      let handleErrors = response => {\n        if (!response.ok) {\n          throw Error(response.statusText);\n        }\n        return response;\n      }\n\n\n      // 현재 JWT 토큰 값이 타당한지 GET /validate 요청을 통해 확인하고\n      // 상태 코드가 200이라면 현재 GET /user/current 요청을 통해 user정보를 받아옴\n      fetch('http://localhost:8000/validate/', {\n        headers: {\n          Authorization: `JWT ${localStorage.getItem('token')}`\n        }\n      })\n      .then(res => {\n      \n        fetch('http://localhost:8000/user/current', {\n          headers: {\n            Authorization: `JWT ${localStorage.getItem('token')}`\n          }\n        })\n        .then(handleErrors)\n        .then(res => res.json())\n        .then(json => {\n          // 현재 유저 정보 받아왔다면, 로그인 상태로 state 업데이트 하고\n          if (json.username) {\n            this.setState({ username: json.username });\n          }\n\n          // Refresh Token 발급 받아 token의 만료 시간 연장\n          fetch('http://localhost:8000/refresh/', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              token: localStorage.getItem('token')\n            })\n          })\n          .then(handleErrors)\n          .then(res => res.json())\n          .then((json)=>{\n\n            this.userHasAuthenticated(true, json.user.username, json.token);\n            \n            console.log('Refresh Token 발급');\n            console.log(json.token);\n          })\n          .catch(error => {\n\n            console.log(error);\n  \n          });\n          ;\n\n\n        })\n        .catch(error => {\n\n          this.handleLogout();\n\n        });\n      })\n      .catch(error => {\n        \n        this.handleLogout();\n        \n      });\n      \n      \n    }\n  }\n\n  // 새로운 User가 로그인 했다면 (서버로 부터 access token을 발급받았을 것이고) 해당 토큰을 localStorage에 저장\n  userHasAuthenticated = (authenticated, username, token) => {\n    this.setState({\n      isAuthenticated: authenticated,\n      username: username\n    });\n    console.log(token);\n    localStorage.setItem('token', token);\n  }\n\n  // 로그인 상태였던 유저가 로그아웃을 시도한다면 토큰을 지움\n  handleLogout = () => {\n  \n    // 이 부분 이슈 잡아야 하는데, 사실 f5 리프레쉬 됐을때 구글 로그인 로직이 자동 호출되는 것만 막으면 됨\n    // Login.js -> handleGoogleSignIn() 함수\n    try {\n      \n      window.gapi && window.gapi.auth2.getAuthInstance().signOut()\n        .then( () => {\n\n          this.setState({\n            isAuthenticated: false,\n            username: ''\n          });\n          localStorage.removeItem('token');\n          console.log('Logged out successfully');  \n\n        });\n    }catch{\n\n      this.setState({\n        isAuthenticated: false,\n        username: ''\n      });\n      localStorage.removeItem('token');\n      console.log('Logged out successfully');  \n\n    }\n    \n    \n\n\n\n  }\n\n  render() {\n    const childProps = {\n      username: this.state.username,\n      isAuthenticated: this.state.isAuthenticated,\n      userHasAuthenticated: this.userHasAuthenticated\n    };\n    return (\n      <div className=\"App\">\n        <NavBar\n          isAuthenticated={this.state.isAuthenticated}\n          username={this.state.username}\n          handleLogout={this.handleLogout}\n        />\n        <Routes childProps={childProps}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
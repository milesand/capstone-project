{"ast":null,"code":"import _defineProperty from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/hong/PRTest/capstone-project/React/src/containers/Login.js\";\nimport React, { Component, Fragment } from \"react\";\nimport LoginForm from \"../components/auth/LoginForm\"; //로그인\n\nvar Login =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Login, _Component);\n\n  //export default : 다른 모듈에서 이 모듈을 import할 때 내보낼 대표 값\n  function Login(props) {\n    var _this;\n\n    _classCallCheck(this, Login);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Login).call(this, props));\n\n    _this.handleChange = function (event) {\n      _this.setState(_defineProperty({}, event.target.id, event.target.value));\n    };\n\n    _this.state = {\n      username: \"\",\n      password: \"\"\n    };\n    console.log(\"로그인 시작.\");\n    return _this;\n  } //유저 로그인 상태 체크\n\n\n  _createClass(Login, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.isLogin) {\n        this.props.history.push(\"/\");\n      }\n    }\n  }, {\n    key: \"validateField\",\n    value: function validateField(username, password) {\n      return username && username.length > 0 && password && password.length > 0;\n    }\n  }, {\n    key: \"submit\",\n    //구글 로그인 구현하기\n    // 일반 로그인\n    value: function submit(e) {\n      var _this2 = this;\n\n      submitEvent.preventDefault();\n      var data = {\n        //let은 var를 대체하는 블락변수이다.\n        username: this.state.username,\n        password: this.state.password\n      };\n\n      var err = function err(response) {\n        console.log(response);\n\n        if (response.hasOwnProperty(\"error\")) {\n          // response에 error 키를 가진 값이 있을 경우 에러 발생했다는 의미\n          if (response.hasOwnProperty(\"email\")) {\n            //이메일 인증 안받았을 때\n            _this2.props.userStateChange(true, false, data.username, response['email']);\n\n            localStorage.setItem('isLogin', true);\n\n            _this2.props.history.push('/mail-resend');\n          } else {\n            //아이디 비밀번호 틀렸을 때\n            throw Error(response['error']);\n          }\n        }\n\n        return response;\n      }; // 서버로부터 새로운 access token 발급받음\n\n\n      fetch('http://localhost/api/jwt-login', {\n        //보통 fetch는 쿠키를 보내거나 받지 않는다. 쿠키를 전송하거나 받기 위해서는 credentials 옵션을 반드시 설정해야 한다.\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        //서버에 실을 때 수정\n        body: JSON.stringify(data)\n      }).then(function (res) {\n        return res.json();\n      }).then(handleErrors).then(function (json) {\n        //로그인이 성공하면 response에는 유저의 고유 id와 함께 jwt token이 들어있다.\n        // 발급 완료 되었다면 해당 토큰을 클라이언트 Local Storage에 저장\n        console.log(\"로그인 성공!\");\n\n        if (json.email && json.username) {\n          _this2.props.userStateChange(true, true, json.username, json.email);\n\n          localStorage.setItem('isLogin', true);\n          localStorage.setItem('isMailAuthenticated', true);\n\n          _this2.props.history.push(\"/\");\n        }\n      }).catch(function (error) {\n        return alert(error);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(LoginForm, {\n        username: this.state.username,\n        password: this.state.password,\n        handleChangeUsername: function handleChangeUsername(e) {\n          return _this3.handleChange(e);\n        },\n        handleChangePassword: function handleChangePassword(e) {\n          return _this3.handleChange(e);\n        },\n        handleSubmit: function handleSubmit(e) {\n          return _this3.handleSubmit(e);\n        },\n        handleGoogleSignIn: function handleGoogleSignIn(e) {\n          return _this3.handleGoogleSignIn(e);\n        },\n        validate: this.validateForm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Login;\n}(Component);\n\nexport { Login as default };","map":{"version":3,"sources":["/home/hong/PRTest/capstone-project/React/src/containers/Login.js"],"names":["React","Component","Fragment","LoginForm","Login","props","handleChange","event","setState","target","id","value","state","username","password","console","log","isLogin","history","push","length","e","submitEvent","preventDefault","data","err","response","hasOwnProperty","userStateChange","localStorage","setItem","Error","fetch","method","headers","credentials","body","JSON","stringify","then","res","json","handleErrors","email","catch","error","alert","handleSubmit","handleGoogleSignIn","validateForm"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport LoginForm from \"../components/auth/LoginForm\";\n\n//로그인\nexport default class Login extends Component { //export default : 다른 모듈에서 이 모듈을 import할 때 내보낼 대표 값\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: \"\",\n      password: \"\"\n    };\n    console.log(\"로그인 시작.\");\n  }\n\n  //유저 로그인 상태 체크\n  componentDidMount() {\n    if (this.props.isLogin) {\n      this.props.history.push(\"/\");\n    }\n  }\n\n  validateField(username, password) {\n    return (username&&username.length>0&&password&&password.length>0);\n  }\n\n  handleChange = event => {\n    this.setState({\n      [event.target.id]: event.target.value\n    });\n  }\n\n  //구글 로그인 구현하기\n\n\n  // 일반 로그인\n  submit(e) {\n\n    submitEvent.preventDefault();\n\n    let data = { //let은 var를 대체하는 블락변수이다.\n      username: this.state.username,\n      password: this.state.password\n    };\n\n    let err = response => {\n      console.log(response);\n      if (response.hasOwnProperty(\"error\")) { // response에 error 키를 가진 값이 있을 경우 에러 발생했다는 의미\n        if(response.hasOwnProperty(\"email\")){ //이메일 인증 안받았을 때\n          this.props.userStateChange(true, false, data.username, response['email']);\n          localStorage.setItem('isLogin', true);\n          this.props.history.push('/mail-resend');\n        }\n        else{ //아이디 비밀번호 틀렸을 때\n           throw Error(response['error']);\n        }\n      }\n      return response;\n    }\n\n    // 서버로부터 새로운 access token 발급받음\n    fetch('http://localhost/api/jwt-login', {\n      //보통 fetch는 쿠키를 보내거나 받지 않는다. 쿠키를 전송하거나 받기 위해서는 credentials 옵션을 반드시 설정해야 한다.\n      method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials : 'include', //서버에 실을 때 수정\n        body: JSON.stringify(data)\n      })\n    .then(res => res.json())\n    .then(handleErrors)\n    .then(json => {\n      //로그인이 성공하면 response에는 유저의 고유 id와 함께 jwt token이 들어있다.\n      // 발급 완료 되었다면 해당 토큰을 클라이언트 Local Storage에 저장\n      console.log(\"로그인 성공!\");\n      if (json.email && json.username) {\n        this.props.userStateChange(true, true, json.username, json.email);\n        localStorage.setItem('isLogin', true);\n        localStorage.setItem('isMailAuthenticated', true);       \n        this.props.history.push(\"/\");\n      }\n    })\n    .catch(error => alert(error));\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <LoginForm\n          username={this.state.username}\n          password={this.state.password}\n          handleChangeUsername={e => this.handleChange(e)}\n          handleChangePassword={e => this.handleChange(e)}\n          handleSubmit={e => this.handleSubmit(e)}\n          handleGoogleSignIn={e => this.handleGoogleSignIn(e)}\n          validate={this.validateForm}\n        />\n\n      </Fragment>\n\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"/home/hong/capstone-project/React/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/hong/capstone-project/React/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/hong/capstone-project/React/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/hong/capstone-project/React/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/hong/capstone-project/React/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/hong/capstone-project/React/src/App.js\";\nimport React, { Component } from \"react\";\nimport NavBar from \"./components/routing/Nav\";\nimport Routes from \"./Routes\";\nimport \"./App.css\";\nimport { withRouter } from \"react-router-dom\"; //로그아웃 했을 때 로그인 화면으로 리다이렉션하기 위해 import\n\nimport cookie from 'react-cookies';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props)); //App 컴포넌트가 상속받은 Component가 지니고 있던 생성자를 super를 통해 미리 실행한다.\n\n    _this.userHasAuthenticated = function (authenticated, id, username) {\n      _this.setState({\n        isAuthenticated: authenticated,\n        userid: id,\n        username: username\n      }); //localStorage.setItem('token', token); //로컬 저장소에 JWT 토큰 저장할 때 사용, 쿠키에 저장하려면 지워야 함\n\n    };\n\n    _this.handleLogout = function () {\n      // 이 부분 이슈 잡아야 하는데, 사실 f5 리프레쉬 됐을때 구글 로그인 로직이 자동 호출되는 것만 막으면 됨\n      // Login.js -> handleGoogleSignIn() 함수\n      try {\n        window.gapi.then(function () {\n          _this.setState({\n            isAuthenticated: false,\n            userid: ''\n          });\n\n          localStorage.removeItem('token');\n          localStorage.removeItem('pk');\n          console.log('Logged out successfully');\n\n          _this.props.history.push(\"/login\");\n        });\n      } catch (_unused) {\n        console.log(\"error!\");\n\n        _this.setState({\n          isAuthenticated: false,\n          userid: ''\n        });\n\n        localStorage.removeItem('token');\n        localStorage.removeItem('pk');\n        console.log('Logged out successfully');\n      }\n    };\n\n    _this.state = {\n      //컴포넌트의 state 정의\n      username: \"\",\n      userid: \"\"\n    };\n    return _this;\n  } // user가 로그인 중인지 확인하고, 로그인 중이라면 유저의 정보를 서버로부터 받아온다.\n\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      //컴포넌트가 만들어지고 render가 호출된 이후에 호출되는 메소드\n      //사용자가 로그인 상태인지 확인하기 위해 클라이언트에 HTTPonly jwt cookie가 저장되어 있는지 확인\n      fetch('http://localhost/api/user', {\n        credentials: 'include'\n      }); // 사용자 아이디 속성이 이미 존재하는 상황이라면 서버에 GET  요청하여 해당 access token이 유효한지 확인\n\n      if (this.state.username) {\n        console.log(\"token test.\");\n        console.log(this.state);\n\n        var handleErrors = function handleErrors(response) {\n          if (!response.ok) {\n            throw Error(response.statusText);\n          }\n\n          return response;\n        }; // JWT 토큰 값이 유효한지 확인하기 위해 /api/jwt-verify로 POST 리퀘스트를 보낸다.\n\n\n        fetch('http://localhost/api/jwt-verify', {\n          //서버에 실을 때는 :8000 지워야합니다.\n          headers: {\n            Authorization: \"jwt \".concat(localStorage.getItem('token'))\n          }\n        }).then(function (res) {\n          var url = 'http://localhost/api/user/' + localStorage.getItem('pk');\n          console.log(\"url test.\");\n          console.log(url);\n          fetch(url, {\n            //이부분 유저 id로 요청하도록 수정해야 함.\n            headers: {\n              Authorization: \"jwt \".concat(localStorage.getItem('token'))\n            }\n          }).then(handleErrors).then(function (res) {\n            return res.json();\n          }).then(function (json) {\n            // 현재 유저 정보 받아왔다면, 로그인 상태로 state 업데이트 하고\n            console.log(\"success!!!\");\n            console.log(json);\n\n            if (json.username) {\n              _this2.setState({\n                username: json.username,\n                userid: json._id\n              }); //setState : 컴포넌트의 state를 변경한다. state를 변경하려면 setState를 무조건 거쳐야 한다.\n\n            }\n\n            console.log(_this2.state); // Refresh Token 발급 받아 token의 만료 시간 연장\n\n            fetch('http://localhost/api/jwt-refresh', {\n              //토큰 재발급관련\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                token: localStorage.getItem('token')\n              })\n            }).then(handleErrors).then(function (res) {\n              return res.json();\n            }).then(function (json) {\n              console.log(json);\n\n              _this2.userHasAuthenticated(true, _this2.state.userid, json.token);\n\n              console.log('Refresh Token 발급');\n              console.log(json.token);\n              console.log(_this2.state);\n            }).catch(function (error) {\n              console.log(error);\n            });\n            ;\n          }).catch(function (error) {\n            console.log(\"에러발생2!!!!!!!!\");\n\n            _this2.handleLogout();\n          });\n        }).catch(function (error) {\n          console.log(\"에러발생!!!!!!!!\");\n\n          _this2.handleLogout();\n        });\n      }\n    } // 새로운 User가 로그인 했다면 (서버로 부터 access token을 발급받았을 것이고) 해당 토큰을 localStorage에 저장\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var childProps = {\n        username: this.state.id,\n        isAuthenticated: this.state.isAuthenticated,\n        userHasAuthenticated: this.userHasAuthenticated\n      };\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, React.createElement(NavBar, {\n        isAuthenticated: this.state.isAuthenticated,\n        username: this.state.username,\n        handleLogout: this.handleLogout,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }), React.createElement(Routes, {\n        childProps: childProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component); //export default App;\n\n\nexport default withRouter(App); //로그아웃 했을 때 로그인화면으로 리다이렉트하기 위해 바꿔준다.","map":{"version":3,"sources":["/home/hong/capstone-project/React/src/App.js"],"names":["React","Component","NavBar","Routes","withRouter","cookie","App","props","userHasAuthenticated","authenticated","id","username","setState","isAuthenticated","userid","handleLogout","window","gapi","then","localStorage","removeItem","console","log","history","push","state","fetch","credentials","handleErrors","response","ok","Error","statusText","headers","Authorization","getItem","res","url","json","_id","method","body","JSON","stringify","token","catch","error","childProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport NavBar from \"./components/routing/Nav\";\nimport Routes from \"./Routes\";\nimport \"./App.css\";\nimport { withRouter } from \"react-router-dom\"; //로그아웃 했을 때 로그인 화면으로 리다이렉션하기 위해 import\nimport cookie from 'react-cookies';\n\nclass App extends Component {\n  constructor(props) {\n    super(props); //App 컴포넌트가 상속받은 Component가 지니고 있던 생성자를 super를 통해 미리 실행한다.\n\n    this.state = { //컴포넌트의 state 정의\n      username: \"\",\n      userid: \"\",\n    };\n  }\n\n  // user가 로그인 중인지 확인하고, 로그인 중이라면 유저의 정보를 서버로부터 받아온다.\n  componentDidMount() { //컴포넌트가 만들어지고 render가 호출된 이후에 호출되는 메소드\n    //사용자가 로그인 상태인지 확인하기 위해 클라이언트에 HTTPonly jwt cookie가 저장되어 있는지 확인\n    fetch('http://localhost/api/user', {\n      credentials: 'include',\n      \n    })\n\n    // 사용자 아이디 속성이 이미 존재하는 상황이라면 서버에 GET  요청하여 해당 access token이 유효한지 확인\n    if (this.state.username) {\n      console.log(\"token test.\");\n      console.log(this.state);\n      let handleErrors = response => {\n        if (!response.ok) {\n          throw Error(response.statusText);\n        }\n        return response;\n      }\n\n\n      // JWT 토큰 값이 유효한지 확인하기 위해 /api/jwt-verify로 POST 리퀘스트를 보낸다.\n      fetch('http://localhost/api/jwt-verify', { //서버에 실을 때는 :8000 지워야합니다.\n        headers: {\n          Authorization: `jwt ${localStorage.getItem('token')}`\n        }\n      })\n      .then(res => {\n        let url='http://localhost/api/user/' + localStorage.getItem('pk');\n        console.log(\"url test.\");\n        console.log(url);\n        fetch(url, { //이부분 유저 id로 요청하도록 수정해야 함.\n          headers: {\n            Authorization: `jwt ${localStorage.getItem('token')}`\n          }\n        })\n        .then(handleErrors)\n        .then(res => res.json())\n        .then(json => {\n          // 현재 유저 정보 받아왔다면, 로그인 상태로 state 업데이트 하고\n          console.log(\"success!!!\");\n          console.log(json);\n          if (json.username) {\n            this.setState({ username: json.username,\n                            userid: json._id}); //setState : 컴포넌트의 state를 변경한다. state를 변경하려면 setState를 무조건 거쳐야 한다.\n          }\n          console.log(this.state);\n          // Refresh Token 발급 받아 token의 만료 시간 연장\n          fetch('http://localhost/api/jwt-refresh', { //토큰 재발급관련\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              token: localStorage.getItem('token')\n            })\n          })\n          .then(handleErrors)\n          .then(res => res.json())\n          .then((json)=>{\n            console.log(json);\n            this.userHasAuthenticated(true, this.state.userid, json.token);\n\n            console.log('Refresh Token 발급');\n            console.log(json.token);\n            console.log(this.state);\n          })\n          .catch(error => {\n\n            console.log(error);\n\n          });\n          ;\n\n\n        })\n        .catch(error => {\n          console.log(\"에러발생2!!!!!!!!\");\n          this.handleLogout();\n\n        });\n      })\n      .catch(error => {\n        console.log(\"에러발생!!!!!!!!\");\n        this.handleLogout();\n\n      });\n\n\n    }\n  }\n\n  // 새로운 User가 로그인 했다면 (서버로 부터 access token을 발급받았을 것이고) 해당 토큰을 localStorage에 저장\n  userHasAuthenticated = (authenticated, id, username) => {\n    this.setState({\n      isAuthenticated: authenticated,\n      userid: id,\n      username: username\n    });\n    //localStorage.setItem('token', token); //로컬 저장소에 JWT 토큰 저장할 때 사용, 쿠키에 저장하려면 지워야 함\n  }\n\n  // 로그인 상태였던 유저가 로그아웃을 시도한다면 토큰을 지움\n  handleLogout = () => {\n\n    // 이 부분 이슈 잡아야 하는데, 사실 f5 리프레쉬 됐을때 구글 로그인 로직이 자동 호출되는 것만 막으면 됨\n    // Login.js -> handleGoogleSignIn() 함수\n    try {\n\n      window.gapi\n        .then( () => {\n\n          this.setState({\n            isAuthenticated: false,\n            userid: ''\n          });\n          localStorage.removeItem('token');\n          localStorage.removeItem('pk');\n          console.log('Logged out successfully');\n          this.props.history.push(\"/login\");\n        });\n    }catch{\n      console.log(\"error!\");\n      this.setState({\n        isAuthenticated: false,\n        userid: ''\n      });\n      localStorage.removeItem('token');\n      localStorage.removeItem('pk');\n      console.log('Logged out successfully');\n    }\n\n\n\n\n\n  }\n\n  render() {\n    const childProps = {\n      username: this.state.id,\n      isAuthenticated: this.state.isAuthenticated,\n      userHasAuthenticated: this.userHasAuthenticated\n    };\n    return (\n      <div className=\"App\">\n        <NavBar\n          isAuthenticated={this.state.isAuthenticated}\n          username={this.state.username}\n          handleLogout={this.handleLogout}\n        />\n        <Routes childProps={childProps}/>\n      </div>\n    );\n  }\n}\n\n//export default App;\nexport default withRouter(App); //로그아웃 했을 때 로그인화면으로 리다이렉트하기 위해 바꿔준다.\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"/home/hong/capstone-project/React/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/hong/capstone-project/React/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/hong/capstone-project/React/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/hong/capstone-project/React/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/hong/capstone-project/React/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/hong/capstone-project/React/src/App.js\";\nimport React, { Component } from \"react\";\nimport NavBar from \"./components/routing/Nav\";\nimport Routes from \"./Routes\";\nimport \"./App.css\";\nimport { withRouter } from \"react-router-dom\"; //로그아웃 했을 때 로그인 화면으로 리다이렉션하기 위해 import\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props)); //App 컴포넌트가 상속받은 Component가 지니고 있던 생성자를 super를 통해 미리 실행한다.\n\n    _this.userHasAuthenticated = function (authenticated, id, token) {\n      _this.setState({\n        isAuthenticated: authenticated,\n        userid: id\n      });\n\n      console.log(_this.state);\n      localStorage.setItem('token', token);\n    };\n\n    _this.handleLogout = function () {\n      // 이 부분 이슈 잡아야 하는데, 사실 f5 리프레쉬 됐을때 구글 로그인 로직이 자동 호출되는 것만 막으면 됨\n      // Login.js -> handleGoogleSignIn() 함수\n      try {\n        window.gapi && window.gapi.auth2.getAuthInstance().signOut().then(function () {\n          _this.setState({\n            isAuthenticated: false,\n            username: ''\n          });\n\n          localStorage.removeItem('token');\n          console.log('Logged out successfully');\n\n          _this.props.history.push(\"/login\");\n        });\n      } catch (_unused) {\n        _this.setState({\n          isAuthenticated: false,\n          username: ''\n        });\n\n        localStorage.removeItem('token');\n        console.log('Logged out successfully');\n      }\n    };\n\n    _this.state = {\n      //컴포넌트의 state 정의\n      username: \"\",\n      userid: \"\",\n      isAuthenticated: localStorage.getItem('token') ? true : false\n    };\n    return _this;\n  } // user가 로그인 중인지 확인하고, 로그인 중이라면 유저의 정보를 서버로부터 받아온다.\n\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      //컴포넌트가 만들어지고 render가 호출된 이후에 호출되는 메소드\n      // 토큰(access token)이 이미 존재하는 상황이라면 서버에 GET /validate 요청하여 해당 access token이 유효한지 확인\n      if (this.state.isAuthenticated) {\n        console.log(this.state);\n        console.log(\"token test.\");\n\n        var handleErrors = function handleErrors(response) {\n          if (!response.ok) {\n            throw Error(response.statusText);\n          }\n\n          return response;\n        }; // JWT 토큰 값이 유효한지 확인하기 위해 /api/jwt-verify로 POST 리퀘스트를 보낸다.\n\n\n        fetch('http://localhost:8000/api/jwt-verify', {\n          //서버에 실을 때는 :8000 지워야합니다.\n          headers: {\n            Authorization: \"jwt \".concat(localStorage.getItem('token'))\n          }\n        }).then(function (res) {\n          var url = 'http://localhost:8000/user/' + _this2.state.userid;\n          console.log(\"url test.\");\n          console.log(url);\n          fetch(url, {\n            //이부분 유저 id로 요청하도록 수정해야 함.\n            headers: {\n              Authorization: \"jwt \".concat(localStorage.getItem('token'))\n            }\n          }).then(handleErrors).then(function (res) {\n            return res.json();\n          }).then(function (json) {\n            // 현재 유저 정보 받아왔다면, 로그인 상태로 state 업데이트 하고\n            console.log(\"success!!!\");\n            console.log(json);\n\n            if (json.username) {\n              _this2.setState({\n                username: json.username\n              }); //setState : 컴포넌트의 state를 변경한다. state를 변경하려면 setState를 무조건 거쳐야 한다.\n\n            } // Refresh Token 발급 받아 token의 만료 시간 연장\n\n\n            fetch('http://localhost:8000/api/jwt-refresh/', {\n              //토큰 재발급관련\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                token: localStorage.getItem('token')\n              })\n            }).then(handleErrors).then(function (res) {\n              return res.json();\n            }).then(function (json) {\n              _this2.userHasAuthenticated(true, json.user.username, json.token);\n\n              console.log('Refresh Token 발급');\n              console.log(json.token);\n            }).catch(function (error) {\n              console.log(error);\n            });\n            ;\n          }).catch(function (error) {\n            _this2.handleLogout();\n          });\n        }).catch(function (error) {\n          console.log();\n\n          _this2.handleLogout();\n        });\n      }\n    } // 새로운 User가 로그인 했다면 (서버로 부터 access token을 발급받았을 것이고) 해당 토큰을 localStorage에 저장\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var childProps = {\n        username: this.state.id,\n        isAuthenticated: this.state.isAuthenticated,\n        userHasAuthenticated: this.userHasAuthenticated\n      };\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, React.createElement(NavBar, {\n        isAuthenticated: this.state.isAuthenticated,\n        username: this.state.id,\n        handleLogout: this.handleLogout,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }), React.createElement(Routes, {\n        childProps: childProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component); //export default App;\n\n\nexport default withRouter(App); //로그아웃 했을 때 로그인화면으로 리다이렉트하기 위해 바꿔준다.","map":{"version":3,"sources":["/home/hong/capstone-project/React/src/App.js"],"names":["React","Component","NavBar","Routes","withRouter","App","props","userHasAuthenticated","authenticated","id","token","setState","isAuthenticated","userid","console","log","state","localStorage","setItem","handleLogout","window","gapi","auth2","getAuthInstance","signOut","then","username","removeItem","history","push","getItem","handleErrors","response","ok","Error","statusText","fetch","headers","Authorization","res","url","json","method","body","JSON","stringify","user","catch","error","childProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport NavBar from \"./components/routing/Nav\";\nimport Routes from \"./Routes\";\nimport \"./App.css\";\nimport { withRouter } from \"react-router-dom\"; //로그아웃 했을 때 로그인 화면으로 리다이렉션하기 위해 import\n\nclass App extends Component {\n  constructor(props) {\n    super(props); //App 컴포넌트가 상속받은 Component가 지니고 있던 생성자를 super를 통해 미리 실행한다.\n\n    this.state = { //컴포넌트의 state 정의\n      username: \"\",\n      userid: \"\",\n      isAuthenticated: localStorage.getItem('token') ? true : false\n    };\n  }\n\n  // user가 로그인 중인지 확인하고, 로그인 중이라면 유저의 정보를 서버로부터 받아온다.\n  componentDidMount() { //컴포넌트가 만들어지고 render가 호출된 이후에 호출되는 메소드\n    // 토큰(access token)이 이미 존재하는 상황이라면 서버에 GET /validate 요청하여 해당 access token이 유효한지 확인\n    if (this.state.isAuthenticated) {\n      console.log(this.state);\n      console.log(\"token test.\");\n      let handleErrors = response => {\n        if (!response.ok) {\n          throw Error(response.statusText);\n        }\n        return response;\n      }\n\n\n      // JWT 토큰 값이 유효한지 확인하기 위해 /api/jwt-verify로 POST 리퀘스트를 보낸다.\n      fetch('http://localhost:8000/api/jwt-verify', { //서버에 실을 때는 :8000 지워야합니다.\n        headers: {\n          Authorization: `jwt ${localStorage.getItem('token')}`\n        }\n      })\n      .then(res => {\n        let url='http://localhost:8000/user/' + this.state.userid;\n        console.log(\"url test.\");\n        console.log(url);\n        fetch(url, { //이부분 유저 id로 요청하도록 수정해야 함.\n          headers: {\n            Authorization: `jwt ${localStorage.getItem('token')}`\n          }\n        })\n        .then(handleErrors)\n        .then(res => res.json())\n        .then(json => {\n          // 현재 유저 정보 받아왔다면, 로그인 상태로 state 업데이트 하고\n          console.log(\"success!!!\");\n          console.log(json);\n          if (json.username) {\n            this.setState({ username: json.username }); //setState : 컴포넌트의 state를 변경한다. state를 변경하려면 setState를 무조건 거쳐야 한다.\n          }\n\n          // Refresh Token 발급 받아 token의 만료 시간 연장\n          fetch('http://localhost:8000/api/jwt-refresh/', { //토큰 재발급관련\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              token: localStorage.getItem('token')\n            })\n          })\n          .then(handleErrors)\n          .then(res => res.json())\n          .then((json)=>{\n\n            this.userHasAuthenticated(true, json.user.username, json.token);\n\n            console.log('Refresh Token 발급');\n            console.log(json.token);\n          })\n          .catch(error => {\n\n            console.log(error);\n\n          });\n          ;\n\n\n        })\n        .catch(error => {\n\n          this.handleLogout();\n\n        });\n      })\n      .catch(error => {\n        console.log()\n        this.handleLogout();\n\n      });\n\n\n    }\n  }\n\n  // 새로운 User가 로그인 했다면 (서버로 부터 access token을 발급받았을 것이고) 해당 토큰을 localStorage에 저장\n  userHasAuthenticated = (authenticated, id, token) => {\n    this.setState({\n      isAuthenticated: authenticated,\n      userid: id\n    });\n    console.log(this.state);\n    localStorage.setItem('token', token);\n  }\n\n  // 로그인 상태였던 유저가 로그아웃을 시도한다면 토큰을 지움\n  handleLogout = () => {\n\n    // 이 부분 이슈 잡아야 하는데, 사실 f5 리프레쉬 됐을때 구글 로그인 로직이 자동 호출되는 것만 막으면 됨\n    // Login.js -> handleGoogleSignIn() 함수\n    try {\n\n      window.gapi && window.gapi.auth2.getAuthInstance().signOut()\n        .then( () => {\n\n          this.setState({\n            isAuthenticated: false,\n            username: ''\n          });\n          localStorage.removeItem('token');\n          console.log('Logged out successfully');\n          this.props.history.push(\"/login\");\n        });\n    }catch{\n\n      this.setState({\n        isAuthenticated: false,\n        username: ''\n      });\n      localStorage.removeItem('token');\n      console.log('Logged out successfully');\n    }\n\n\n\n\n\n  }\n\n  render() {\n    const childProps = {\n      username: this.state.id,\n      isAuthenticated: this.state.isAuthenticated,\n      userHasAuthenticated: this.userHasAuthenticated\n    };\n    return (\n      <div className=\"App\">\n        <NavBar\n          isAuthenticated={this.state.isAuthenticated}\n          username={this.state.id}\n          handleLogout={this.handleLogout}\n        />\n        <Routes childProps={childProps}/>\n      </div>\n    );\n  }\n}\n\n//export default App;\nexport default withRouter(App); //로그아웃 했을 때 로그인화면으로 리다이렉트하기 위해 바꿔준다.\n"]},"metadata":{},"sourceType":"module"}
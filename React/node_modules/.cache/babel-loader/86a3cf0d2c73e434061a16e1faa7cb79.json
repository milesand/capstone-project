{"ast":null,"code":"import _defineProperty from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/hong/PRTest/capstone-project/React/src/containers/Login.js\";\nimport React, { Component, Fragment } from \"react\";\nimport LoginForm from \"../components/LoginComponents/LoginForm\"; //로그인\n\nvar Login =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Login, _Component);\n\n  //export default : 다른 모듈에서 이 모듈을 import할 때 내보낼 대표 값\n  function Login(props) {\n    var _this;\n\n    _classCallCheck(this, Login);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Login).call(this, props));\n    console.log('login props : ', props);\n    _this.state = {\n      username: \"\",\n      password: \"\"\n    };\n    console.log(\"로그인 시작.\");\n    return _this;\n  } //유저 로그인 상태 체크\n\n\n  _createClass(Login, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.isLogin) {\n        this.props.history.push(\"/\");\n      }\n    }\n  }, {\n    key: \"valChangeControl\",\n    value: function valChangeControl(e) {\n      var target_id = e.target.id;\n      var target_val = e.target.value;\n      this.setState(_defineProperty({}, target_id, target_val));\n    } //구글 로그인 구현하기\n\n  }, {\n    key: \"googleLogin\",\n    value: function googleLogin() {\n      var _this2 = this;\n\n      var auth2 = window.gapi.auth2.getAuthInstance();\n      Promise.resolve(auth2.signIn()).then(function (googleUser) {\n        console.log(\"googleUser : \", googleUser);\n        console.log(\"near login : \", _this2.props);\n        console.log(\"google login called!!!!!\", _this2.props.username);\n        var token = googleUser.getAuthResponse(true).access_token;\n        console.log(\"token : \", token);\n        var data = {\n          access_token: token,\n          social_auth: \"google\"\n        };\n\n        var errorCheck = function errorCheck(response) {\n          if (response.hasOwnProperty('error')) {\n            throw Error(response['error']);\n          }\n\n          return response;\n        };\n\n        console.log(\"here, props : \", _this2.props);\n\n        if (token != null) {\n          fetch(\"http://localhost/api/google\", {\n            method: \"POST\",\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            credentials: 'include',\n            body: JSON.stringify(data)\n          }).then(function (res) {\n            return res.json();\n          }).then(errorCheck).then(function (content) {\n            console.log('prop logout : ', _this2.props.isLogout);\n\n            _this2.props.userStateChange(true, true, content.username, content.email);\n\n            _this2.props.history.push('/');\n          }).catch(function (e) {\n            return alert(e);\n          });\n        }\n      });\n    }\n    /*googleLogin(googleUser){\n      console.log(\"near login : \", this.props);\n      if(this.props.username==\"\"){\n        console.log(\"google login called!!!!!\", this.props.username);\n        let token=googleUser.getAuthResponse().access_token;\n        console.log(token);\n         let data={\n          access_token: token,\n          social_auth: \"google\"\n        }\n         let errorCheck= response =>{\n          if(response.hasOwnProperty('error')){\n            throw Error(response['error'])\n          }\n          return response;\n        }\n        console.log(\"here, props : \", this.props);\n        if(token!=null){\n          fetch(\"http://localhost/api/google\", {\n            method: \"POST\",\n            headers: {\n              'Content-Type' : 'application/json',\n            },\n            credentials: 'include',\n            body: JSON.stringify(data)\n          })\n          .then(res=>res.json())\n          .then(errorCheck)\n          .then(content => {\n            console.log('prop logout : ', this.props.isLogout);\n            this.props.userStateChange(true, true, content.username, content.email);\n            this.props.history.push('/');\n          }).catch(e=>alert(e))\n        }\n      }\n    }*/\n    // 일반 로그인\n\n  }, {\n    key: \"normalLogin\",\n    value: function normalLogin(e) {\n      var _this3 = this;\n\n      e.preventDefault();\n      this.props.toggleLoading();\n      var isMailAuthenticated = true;\n      var data = {\n        username: this.state.username,\n        password: this.state.password\n      };\n      fetch(\"http://localhost/api/jwt-login\", {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify(data)\n      }).then(function (res) {\n        return res.json();\n      }).then(function (content) {\n        // 아이디와 비밀번호가 올바른지 확인하고, 맞으면 이메일 인증 여부 확인\n        if (content.hasOwnProperty('error')) {\n          if (content.hasOwnProperty('email')) {\n            isMailAuthenticated = false;\n          } else throw Error(content['error']);\n        }\n\n        console.log(\"content ? \", content);\n\n        _this3.props.userStateChange(true, isMailAuthenticated, _this3.state.username, content.email);\n\n        _this3.props.history.push('/');\n      }).catch(function (error) {\n        return alert(error);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, React.createElement(LoginForm, {\n        username: this.state.username,\n        password: this.state.password,\n        isLoading: this.props.isLoading,\n        isLogin: this.isLogin,\n        changeUsername: function changeUsername(e) {\n          return _this4.valChangeControl(e);\n        },\n        changePassword: function changePassword(e) {\n          return _this4.valChangeControl(e);\n        },\n        normalLogin: function normalLogin(e) {\n          return _this4.normalLogin(e);\n        },\n        googleLogin: function googleLogin(e) {\n          return _this4.googleLogin(e);\n        },\n        test: function test(e) {\n          return _this4.test(e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Login;\n}(Component);\n\nexport { Login as default };","map":{"version":3,"sources":["/home/hong/PRTest/capstone-project/React/src/containers/Login.js"],"names":["React","Component","Fragment","LoginForm","Login","props","console","log","state","username","password","isLogin","history","push","e","target_id","target","id","target_val","value","setState","auth2","window","gapi","getAuthInstance","Promise","resolve","signIn","then","googleUser","token","getAuthResponse","access_token","data","social_auth","errorCheck","response","hasOwnProperty","Error","fetch","method","headers","credentials","body","JSON","stringify","res","json","content","isLogout","userStateChange","email","catch","alert","preventDefault","toggleLoading","isMailAuthenticated","error","isLoading","valChangeControl","normalLogin","googleLogin","test"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport LoginForm from \"../components/LoginComponents/LoginForm\";\n\n//로그인\nexport default class Login extends Component { //export default : 다른 모듈에서 이 모듈을 import할 때 내보낼 대표 값\n  constructor(props) {\n    super(props);\n    console.log('login props : ', props);\n    this.state = {\n      username: \"\",\n      password: \"\",\n    };\n    console.log(\"로그인 시작.\");\n  }\n\n  //유저 로그인 상태 체크\n  componentDidMount() {\n    if (this.props.isLogin) {\n      this.props.history.push(\"/\");\n    }\n  }\n\n  valChangeControl(e){\n    let target_id=e.target.id;\n    let target_val=e.target.value;\n    this.setState({\n      [target_id]: target_val\n    });\n  }\n\n  //구글 로그인 구현하기\n\n  googleLogin(){\n    let auth2=window.gapi.auth2.getAuthInstance();\n    Promise.resolve(auth2.signIn())\n    .then(googleUser => {\n      console.log(\"googleUser : \", googleUser);\n      console.log(\"near login : \", this.props);\n      console.log(\"google login called!!!!!\", this.props.username);\n      let token=googleUser.getAuthResponse(true).access_token;\n      console.log(\"token : \", token);\n\n      let data={\n        access_token: token,\n        social_auth: \"google\"\n      }\n\n      let errorCheck= response =>{\n        if(response.hasOwnProperty('error')){\n          throw Error(response['error'])\n        }\n        return response;\n      }\n      console.log(\"here, props : \", this.props);\n      if(token!=null){\n        fetch(\"http://localhost/api/google\", {\n          method: \"POST\",\n          headers: {\n            'Content-Type' : 'application/json',\n          },\n          credentials: 'include',\n          body: JSON.stringify(data)\n        })\n        .then(res=>res.json())\n        .then(errorCheck)\n        .then(content => {\n          console.log('prop logout : ', this.props.isLogout);\n          this.props.userStateChange(true, true, content.username, content.email);\n          this.props.history.push('/');\n        }).catch(e=>alert(e))\n      }\n    })\n  }\n\n  /*googleLogin(googleUser){\n    console.log(\"near login : \", this.props);\n    if(this.props.username==\"\"){\n      console.log(\"google login called!!!!!\", this.props.username);\n      let token=googleUser.getAuthResponse().access_token;\n      console.log(token);\n\n      let data={\n        access_token: token,\n        social_auth: \"google\"\n      }\n\n      let errorCheck= response =>{\n        if(response.hasOwnProperty('error')){\n          throw Error(response['error'])\n        }\n        return response;\n      }\n      console.log(\"here, props : \", this.props);\n      if(token!=null){\n        fetch(\"http://localhost/api/google\", {\n          method: \"POST\",\n          headers: {\n            'Content-Type' : 'application/json',\n          },\n          credentials: 'include',\n          body: JSON.stringify(data)\n        })\n        .then(res=>res.json())\n        .then(errorCheck)\n        .then(content => {\n          console.log('prop logout : ', this.props.isLogout);\n          this.props.userStateChange(true, true, content.username, content.email);\n          this.props.history.push('/');\n        }).catch(e=>alert(e))\n      }\n    }\n  }*/\n\n  // 일반 로그인\n  normalLogin(e) {\n    e.preventDefault();\n    this.props.toggleLoading();\n    let isMailAuthenticated=true;\n    let data={\n      username: this.state.username,\n      password: this.state.password\n    }\n\n    fetch(\"http://localhost/api/jwt-login\", {\n      method: \"POST\",\n      headers: {\n        'Content-Type' : 'application/json',\n      },\n      credentials: 'include',\n      body: JSON.stringify(data)\n    })\n    .then(res=>res.json())\n    .then(content => {\n      // 아이디와 비밀번호가 올바른지 확인하고, 맞으면 이메일 인증 여부 확인\n      if(content.hasOwnProperty('error')){\n        if(content.hasOwnProperty('email')){\n           isMailAuthenticated=false;\n        }\n        else\n           throw Error(content['error']);\n      }\n\n      console.log(\"content ? \", content);\n      this.props.userStateChange(true, isMailAuthenticated, this.state.username, content.email);\n\n      this.props.history.push('/');\n    }).catch(error=>alert(error));\n  }\n\n  render() {\n    return (\n      <Fragment>\n            <LoginForm\n                username={this.state.username}\n                password={this.state.password}\n                isLoading={this.props.isLoading}\n                isLogin={this.isLogin}\n                changeUsername={e => this.valChangeControl(e)}\n                changePassword={e => this.valChangeControl(e)}\n                normalLogin={e => this.normalLogin(e)}\n                googleLogin={e => this.googleLogin(e)}\n                test={e=>this.test(e)}\n            />\n      </Fragment>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
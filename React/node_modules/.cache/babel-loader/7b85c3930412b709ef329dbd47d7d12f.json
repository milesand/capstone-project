{"ast":null,"code":"import _classCallCheck from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/hong/PRTest/capstone-project/React/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/hong/PRTest/capstone-project/React/src/components/App.js\";\nimport React, { Component, Fragment } from \"react\";\nimport NavBar from \"./AuthRoutingComponents/NavBar\";\nimport { withRouter } from \"react-router-dom\"; //로그아웃 했을 때 로그인 화면으로 리다이렉션하기 위해 import\n//라우팅용 모듈들\n\nimport { Route, Switch } from \"react-router-dom\";\nimport NormalRoute from \"./AuthRoutingComponents/NormalRoute\";\nimport AuthenticatedRoute from \"./AuthRoutingComponents/AuthenticatedRoute\";\nimport MailAuthRoute from \"./AuthRoutingComponents/MailAuthRoute\";\nimport ErrorPage from \"./LoginComponents/ErrorPage\";\nimport Home from \"../containers/Home\";\nimport Login from \"../containers/Login\";\nimport Signup from \"../containers/Signup\";\nimport MailResend from \"../containers/MailResend\";\nimport MailValidation from \"../containers/MailValidation\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props)); //App 컴포넌트가 상속받은 Component가 지니고 있던 생성자를 super를 통해 미리 실행한다.\n\n    _this.userStateChange = function (authenticated, mailAuthenticated, username, email) {\n      console.log(\"thisStateTest.\", _this.state);\n\n      if (email == 'google' || email == 'facebook') {\n        //소셜 로그인\n        _this.setState({\n          isLogin: authenticated,\n          username: username,\n          isMailAuthenticated: true\n        });\n      } else {\n        _this.setState({\n          isLogin: authenticated,\n          isMailAuthenticated: mailAuthenticated,\n          username: username,\n          email: email\n        });\n      }\n    };\n\n    _this.logout = function () {\n      console.log(\"logout called!\");\n\n      _this.deleteJWTToken();\n\n      _this.props.history.push(\"/login\");\n    };\n\n    console.log('App prop test.');\n    _this.state = {\n      //컴포넌트의 state 정의\n      username: \"\",\n      email: \"\",\n      isLogin: null,\n      //사용자가 로그인 상태인지 체크한 후에 bool 값이 할당됨.\n      isMailAuthenticated: null\n    };\n    console.log(_this.state);\n    return _this;\n  } // user 정보 받아오기\n\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      //컴포넌트가 만들어지고 render가 호출된 이후에 호출되는 메소드\n      var errorCheck = function errorCheck(response) {\n        console.log(\"err check.\");\n        console.log(response);\n\n        if (!response.hasOwnProperty('error')) {\n          _this2.setState({\n            isLogin: true,\n            isMailAuthenticated: response.is_mail_authenticated,\n            username: response.username,\n            email: response.email\n          });\n        } else {\n          console.log('here.');\n\n          _this2.setState({\n            isLogin: false\n          });\n\n          _this2.deleteJWTToken();\n        }\n\n        console.log('wwwwwstate : ', that.state);\n        return response;\n      };\n\n      var jwtErrorCheck = function jwtErrorCheck(response) {\n        if (!response.ok) {\n          _this2.deleteJWTToken();\n\n          Promise.reject(); //서버에서 jwt 토큰 유효시간 줄여서 테스트해보기\n        }\n\n        return response;\n      };\n\n      fetch('http://localhost/api/user', {\n        // JWT 토큰이 저장되어 있는지, 그리고 저장되어 있다면 해당 JWT 토큰이 유효한지 확인\n        method: \"GET\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include'\n      }).then(function (res) {\n        return res.json();\n      }).then(errorCheck).then(function (content) {\n        if (_this2.state.isLogin) {\n          // 사용자가 로그인 중일 때\n          fetch('http://localhost/api/jwt-refresh', {\n            //JWT 토큰 재발급\n            method: \"POST\",\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            credentials: 'include'\n          }).then(jwtErrorCheck).then(function (res) {\n            return res.json();\n          }).then(function (content) {\n            console.log(\"토큰이 재발급되었습니다.\");\n            console.log(content);\n            console.log(_this2.state);\n            if (_this2.state.isMailAuthenticated) _this2.props.history.push('/'); // 메일 인증 받았으면 메인 페이지로\n            else _this2.props.history.push('/mail-resend'); //안받았으면 메일 인증 안내 페이지로\n          }).catch(function (error) {\n            return console.log('JWT 토큰 재발급 에러!');\n          });\n        }\n      }).catch(function (error) {\n        return console.log('로그인 체크 에러!');\n      });\n    }\n  }, {\n    key: \"deleteJWTToken\",\n    value: function deleteJWTToken() {\n      var _this3 = this;\n\n      var isTokenStored = true;\n\n      var tokenCheck = function tokenCheck(response) {\n        if (!response.ok) {\n          isTokenStored = false;\n        }\n\n        return response;\n      };\n\n      try {\n        fetch('http://localhost/api/logout', {\n          method: \"POST\",\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          credentials: 'include'\n        }).then(tokenCheck).then(function (res) {\n          if (isTokenStored) {\n            console.log(res);\n\n            _this3.setState({\n              isLogin: false,\n              isMailAuthenticated: false,\n              username: '',\n              userid: ''\n            });\n\n            console.log('Logged out successfully');\n          }\n        });\n      } catch (_unused) {\n        console.log(\"error!\");\n        this.setState({\n          isLogin: false,\n          userid: ''\n        });\n        console.log('Logged out successfully');\n      }\n    } // 로그아웃시 서버로 요청 보내서 JWT 토큰이 저장된 httponly 쿠키 제거\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var baseProps = {\n        username: this.state.username,\n        useremail: this.state.email,\n        isLogin: this.state.isLogin,\n        isMailAuthenticated: this.state.isMailAuthenticated,\n        userStateChange: this.userStateChange\n      };\n      console.log(\"base test.\");\n      console.log(baseProps);\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, this.state && this.state.isLogin != null && React.createElement(NavBar, {\n        isLogin: this.state.isLogin,\n        username: this.state.username,\n        logout: this.logout,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }), this.state && this.state.isLogin != null && React.createElement(Switch, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, React.createElement(AuthenticatedRoute, {\n        path: \"/\",\n        exact: true,\n        component: Home,\n        props: baseProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }), React.createElement(NormalRoute, {\n        path: \"/login\",\n        exact: true,\n        component: Login,\n        props: baseProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }), React.createElement(NormalRoute, {\n        path: \"/signup\",\n        exact: true,\n        component: Signup,\n        props: baseProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }), React.createElement(MailAuthRoute, {\n        path: \"/mail-resend\",\n        exact: true,\n        component: MailResend,\n        props: baseProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }), React.createElement(NormalRoute, {\n        path: \"/mail-validation/*\",\n        exact: true,\n        component: MailValidation,\n        props: baseProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }), React.createElement(Route, {\n        component: ErrorPage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(Component); //export default App;\n\n\nexport default withRouter(App); //로그아웃 했을 때 로그인화면으로 리다이렉트하기 위해 바꿔준다.","map":{"version":3,"sources":["/home/hong/PRTest/capstone-project/React/src/components/App.js"],"names":["React","Component","Fragment","NavBar","withRouter","Route","Switch","NormalRoute","AuthenticatedRoute","MailAuthRoute","ErrorPage","Home","Login","Signup","MailResend","MailValidation","App","props","userStateChange","authenticated","mailAuthenticated","username","email","console","log","state","setState","isLogin","isMailAuthenticated","logout","deleteJWTToken","history","push","errorCheck","response","hasOwnProperty","is_mail_authenticated","that","jwtErrorCheck","ok","Promise","reject","fetch","method","headers","credentials","then","res","json","content","catch","error","isTokenStored","tokenCheck","userid","baseProps","useremail"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,SAASC,UAAT,QAA2B,kBAA3B,C,CAA+C;AAE/C;;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,kBAA9B;AACA,OAAOC,WAAP,MAAwB,qCAAxB;AACA,OAAOC,kBAAP,MAA+B,4CAA/B;AACA,OAAOC,aAAP,MAA0B,uCAA1B;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;;IAEMC,G;;;;;AACJ,eAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,6EAAMA,KAAN,GADiB,CACH;;AADG,UA6EnBC,eA7EmB,GA6ED,UAACC,aAAD,EAAgBC,iBAAhB,EAAmCC,QAAnC,EAA6CC,KAA7C,EAAuD;AACvEC,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8B,MAAKC,KAAnC;;AACA,UAAGH,KAAK,IAAE,QAAP,IAAiBA,KAAK,IAAE,UAA3B,EAAsC;AAAE;AACtC,cAAKI,QAAL,CAAc;AACZC,UAAAA,OAAO,EAAER,aADG;AAEZE,UAAAA,QAAQ,EAAEA,QAFE;AAGZO,UAAAA,mBAAmB,EAAE;AAHT,SAAd;AAKD,OAND,MAOI;AACF,cAAKF,QAAL,CAAc;AACZC,UAAAA,OAAO,EAAER,aADG;AAEZS,UAAAA,mBAAmB,EAAER,iBAFT;AAGZC,UAAAA,QAAQ,EAAEA,QAHE;AAIZC,UAAAA,KAAK,EAAEA;AAJK,SAAd;AAMD;AACF,KA9FkB;;AAAA,UA0InBO,MA1ImB,GA0IV,YAAM;AACbN,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;;AACA,YAAKM,cAAL;;AACA,YAAKb,KAAL,CAAWc,OAAX,CAAmBC,IAAnB,CAAwB,QAAxB;AACD,KA9IkB;;AAEjBT,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,UAAKC,KAAL,GAAa;AAAE;AACbJ,MAAAA,QAAQ,EAAE,EADC;AAEXC,MAAAA,KAAK,EAAE,EAFI;AAGXK,MAAAA,OAAO,EAAE,IAHE;AAGI;AACfC,MAAAA,mBAAmB,EAAE;AAJV,KAAb;AAMAL,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAKC,KAAjB;AATiB;AAUlB,G,CAED;;;;;wCACoB;AAAA;;AAAE;AACpB,UAAIQ,UAAU,GAAG,SAAbA,UAAa,CAAAC,QAAQ,EAAI;AAC3BX,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYU,QAAZ;;AACA,YAAG,CAACA,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAJ,EAAqC;AACnC,UAAA,MAAI,CAACT,QAAL,CAAc;AACZC,YAAAA,OAAO,EAAE,IADG;AAEZC,YAAAA,mBAAmB,EAAEM,QAAQ,CAACE,qBAFlB;AAGZf,YAAAA,QAAQ,EAAEa,QAAQ,CAACb,QAHP;AAIZC,YAAAA,KAAK,EAAEY,QAAQ,CAACZ;AAJJ,WAAd;AAMD,SAPD,MAQI;AACFC,UAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;;AACA,UAAA,MAAI,CAACE,QAAL,CAAc;AACZC,YAAAA,OAAO,EAAE;AADG,WAAd;;AAGA,UAAA,MAAI,CAACG,cAAL;AACD;;AACDP,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6Ba,IAAI,CAACZ,KAAlC;AACA,eAAOS,QAAP;AACD,OApBD;;AAsBA,UAAII,aAAa,GAAG,SAAhBA,aAAgB,CAAAJ,QAAQ,EAAI;AAC7B,YAAG,CAACA,QAAQ,CAACK,EAAb,EAAgB;AACb,UAAA,MAAI,CAACT,cAAL;;AACAU,UAAAA,OAAO,CAACC,MAAR,GAFa,CAEK;AACpB;;AACD,eAAOP,QAAP;AACF,OAND;;AAOAQ,MAAAA,KAAK,CAAC,2BAAD,EAA8B;AAAE;AACnCC,QAAAA,MAAM,EAAE,KADyB;AAEjCC,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SAFwB;AAKjCC,QAAAA,WAAW,EAAE;AALoB,OAA9B,CAAL,CAOCC,IAPD,CAOM,UAAAC,GAAG;AAAA,eAAEA,GAAG,CAACC,IAAJ,EAAF;AAAA,OAPT,EAQCF,IARD,CAQMb,UARN,EASCa,IATD,CASM,UAAAG,OAAO,EAAE;AACb,YAAG,MAAI,CAACxB,KAAL,CAAWE,OAAd,EAAsB;AAAE;AACrBe,UAAAA,KAAK,CAAC,kCAAD,EAAqC;AAAE;AACzCC,YAAAA,MAAM,EAAE,MAD+B;AAEvCC,YAAAA,OAAO,EAAE;AACP,8BAAiB;AADV,aAF8B;AAKvCC,YAAAA,WAAW,EAAE;AAL0B,WAArC,CAAL,CAOCC,IAPD,CAOMR,aAPN,EAQCQ,IARD,CAQM,UAAAC,GAAG;AAAA,mBAAEA,GAAG,CAACC,IAAJ,EAAF;AAAA,WART,EASCF,IATD,CASM,UAAAG,OAAO,EAAE;AACZ1B,YAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAD,YAAAA,OAAO,CAACC,GAAR,CAAYyB,OAAZ;AACA1B,YAAAA,OAAO,CAACC,GAAR,CAAY,MAAI,CAACC,KAAjB;AACA,gBAAG,MAAI,CAACA,KAAL,CAAWG,mBAAd,EACE,MAAI,CAACX,KAAL,CAAWc,OAAX,CAAmBC,IAAnB,CAAwB,GAAxB,EADF,CACgC;AADhC,iBAEK,MAAI,CAACf,KAAL,CAAWc,OAAX,CAAmBC,IAAnB,CAAwB,cAAxB,EANO,CAMkC;AAEhD,WAjBD,EAiBGkB,KAjBH,CAiBS,UAAAC,KAAK;AAAA,mBAAE5B,OAAO,CAACC,GAAR,CAAY,gBAAZ,CAAF;AAAA,WAjBd;AAkBF;AACF,OA9BD,EA8BG0B,KA9BH,CA8BS,UAAAC,KAAK;AAAA,eAAE5B,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAF;AAAA,OA9Bd;AAgCD;;;qCAqBe;AAAA;;AACd,UAAI4B,aAAa,GAAC,IAAlB;;AACA,UAAIC,UAAU,GAAG,SAAbA,UAAa,CAAAnB,QAAQ,EAAI;AAC3B,YAAG,CAACA,QAAQ,CAACK,EAAb,EAAgB;AACda,UAAAA,aAAa,GAAC,KAAd;AACD;;AACD,eAAOlB,QAAP;AACD,OALD;;AAOA,UAAI;AACFQ,QAAAA,KAAK,CAAC,6BAAD,EAAgC;AACnCC,UAAAA,MAAM,EAAE,MAD2B;AAEnCC,UAAAA,OAAO,EAAE;AACP,4BAAgB;AADT,WAF0B;AAKnCC,UAAAA,WAAW,EAAE;AALsB,SAAhC,CAAL,CAOCC,IAPD,CAOMO,UAPN,EAQCP,IARD,CAQM,UAAAC,GAAG,EAAE;AACT,cAAGK,aAAH,EAAiB;AACf7B,YAAAA,OAAO,CAACC,GAAR,CAAYuB,GAAZ;;AACA,YAAA,MAAI,CAACrB,QAAL,CAAc;AACZC,cAAAA,OAAO,EAAE,KADG;AAEZC,cAAAA,mBAAmB,EAAE,KAFT;AAGZP,cAAAA,QAAQ,EAAE,EAHE;AAIZiC,cAAAA,MAAM,EAAE;AAJI,aAAd;;AAMA/B,YAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACD;AACF,SAnBD;AAqBD,OAtBD,CAsBC,gBAAK;AACJD,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,aAAKE,QAAL,CAAc;AACZC,UAAAA,OAAO,EAAE,KADG;AAEZ2B,UAAAA,MAAM,EAAE;AAFI,SAAd;AAIA/B,QAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACD;AACF,K,CAED;;;;6BAOS;AACP,UAAM+B,SAAS,GAAG;AAChBlC,QAAAA,QAAQ,EAAE,KAAKI,KAAL,CAAWJ,QADL;AAEhBmC,QAAAA,SAAS,EAAE,KAAK/B,KAAL,CAAWH,KAFN;AAGhBK,QAAAA,OAAO,EAAE,KAAKF,KAAL,CAAWE,OAHJ;AAIhBC,QAAAA,mBAAmB,EAAC,KAAKH,KAAL,CAAWG,mBAJf;AAKhBV,QAAAA,eAAe,EAAE,KAAKA;AALN,OAAlB;AAQAK,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY+B,SAAZ;AACA,aACG,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAK9B,KAAL,IAAc,KAAKA,KAAL,CAAWE,OAAX,IAAoB,IAAlC,IACF,oBAAC,MAAD;AACE,QAAA,OAAO,EAAE,KAAKF,KAAL,CAAWE,OADtB;AAEE,QAAA,QAAQ,EAAE,KAAKF,KAAL,CAAWJ,QAFvB;AAGE,QAAA,MAAM,EAAE,KAAKQ,MAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFH,EAQK,KAAKJ,KAAL,IAAc,KAAKA,KAAL,CAAWE,OAAX,IAAoB,IAAlC,IACA,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,kBAAD;AAAoB,QAAA,IAAI,EAAC,GAAzB;AAA6B,QAAA,KAAK,MAAlC;AAAmC,QAAA,SAAS,EAAEhB,IAA9C;AAAoD,QAAA,KAAK,EAAE4C,SAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,oBAAC,WAAD;AAAa,QAAA,IAAI,EAAC,QAAlB;AAA2B,QAAA,KAAK,MAAhC;AAAiC,QAAA,SAAS,EAAE3C,KAA5C;AAAmD,QAAA,KAAK,EAAE2C,SAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAGE,oBAAC,WAAD;AAAa,QAAA,IAAI,EAAC,SAAlB;AAA4B,QAAA,KAAK,MAAjC;AAAkC,QAAA,SAAS,EAAE1C,MAA7C;AAAqD,QAAA,KAAK,EAAE0C,SAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHF,EAIE,oBAAC,aAAD;AAAe,QAAA,IAAI,EAAC,cAApB;AAAmC,QAAA,KAAK,MAAxC;AAAyC,QAAA,SAAS,EAAEzC,UAApD;AAAgE,QAAA,KAAK,EAAEyC,SAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,EAKE,oBAAC,WAAD;AAAa,QAAA,IAAI,EAAC,oBAAlB;AAAuC,QAAA,KAAK,MAA5C;AAA6C,QAAA,SAAS,EAAExC,cAAxD;AAAwE,QAAA,KAAK,EAAEwC,SAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,EAME,oBAAC,KAAD;AAAO,QAAA,SAAS,EAAE7C,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANF,CATL,CADH;AAqBD;;;;EAjLeT,S,GAoLlB;;;AACA,eAAeG,UAAU,CAACY,GAAD,CAAzB,C,CAAgC","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport NavBar from \"./AuthRoutingComponents/NavBar\";\nimport { withRouter } from \"react-router-dom\"; //로그아웃 했을 때 로그인 화면으로 리다이렉션하기 위해 import\n\n//라우팅용 모듈들\nimport { Route, Switch } from \"react-router-dom\";\nimport NormalRoute from \"./AuthRoutingComponents/NormalRoute\";\nimport AuthenticatedRoute from \"./AuthRoutingComponents/AuthenticatedRoute\";\nimport MailAuthRoute from \"./AuthRoutingComponents/MailAuthRoute\";\nimport ErrorPage from \"./LoginComponents/ErrorPage\";\nimport Home from \"../containers/Home\";\nimport Login from \"../containers/Login\";\nimport Signup from \"../containers/Signup\";\nimport MailResend from \"../containers/MailResend\";\nimport MailValidation from \"../containers/MailValidation\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props); //App 컴포넌트가 상속받은 Component가 지니고 있던 생성자를 super를 통해 미리 실행한다.\n    console.log('App prop test.');\n    this.state = { //컴포넌트의 state 정의\n      username: \"\",\n      email: \"\",\n      isLogin: null, //사용자가 로그인 상태인지 체크한 후에 bool 값이 할당됨.\n      isMailAuthenticated: null\n    };\n    console.log(this.state);\n  }\n\n  // user 정보 받아오기\n  componentDidMount() { //컴포넌트가 만들어지고 render가 호출된 이후에 호출되는 메소드\n    let errorCheck = response => {\n      console.log(\"err check.\");\n      console.log(response);\n      if(!response.hasOwnProperty('error')){\n        this.setState({\n          isLogin: true,\n          isMailAuthenticated: response.is_mail_authenticated,\n          username: response.username,\n          email: response.email,\n        });\n      }\n      else{\n        console.log('here.');\n        this.setState({\n          isLogin: false,\n        });\n        this.deleteJWTToken();\n      }\n      console.log('wwwwwstate : ', that.state);\n      return response;\n    } \n\n    let jwtErrorCheck = response => {\n       if(!response.ok){\n          this.deleteJWTToken();\n          Promise.reject(); //서버에서 jwt 토큰 유효시간 줄여서 테스트해보기\n       }\n       return response;\n    }\n    fetch('http://localhost/api/user', { // JWT 토큰이 저장되어 있는지, 그리고 저장되어 있다면 해당 JWT 토큰이 유효한지 확인\n      method: \"GET\",\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      credentials: 'include',\n    })\n    .then(res=>res.json())\n    .then(errorCheck)\n    .then(content=>{\n      if(this.state.isLogin){ // 사용자가 로그인 중일 때\n         fetch('http://localhost/api/jwt-refresh', { //JWT 토큰 재발급\n            method: \"POST\", \n            headers: {\n              'Content-Type' : 'application/json',\n            },\n            credentials: 'include',\n         })\n         .then(jwtErrorCheck)\n         .then(res=>res.json())\n         .then(content=>{\n            console.log(\"토큰이 재발급되었습니다.\");\n            console.log(content);\n            console.log(this.state);\n            if(this.state.isMailAuthenticated)\n              this.props.history.push('/'); // 메일 인증 받았으면 메인 페이지로\n            else this.props.history.push('/mail-resend'); //안받았으면 메일 인증 안내 페이지로\n\n         }).catch(error=>console.log('JWT 토큰 재발급 에러!'));\n      }\n    }).catch(error=>console.log('로그인 체크 에러!'));\n \n  }\n\n  userStateChange = (authenticated, mailAuthenticated, username, email) => {\n    console.log(\"thisStateTest.\", this.state);\n    if(email=='google'||email=='facebook'){ //소셜 로그인\n      this.setState({\n        isLogin: authenticated,\n        username: username,\n        isMailAuthenticated: true\n      });\n    }\n    else{\n      this.setState({\n        isLogin: authenticated,\n        isMailAuthenticated: mailAuthenticated,\n        username: username,\n        email: email\n      });\n    }\n  }\n\n  deleteJWTToken(){\n    let isTokenStored=true;\n    let tokenCheck = response => {\n      if(!response.ok){\n        isTokenStored=false;\n      }\n      return response;\n    }\n\n    try {\n      fetch('http://localhost/api/logout', {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n      })\n      .then(tokenCheck)\n      .then(res=>{\n        if(isTokenStored){\n          console.log(res);\n          this.setState({\n            isLogin: false,\n            isMailAuthenticated: false,\n            username: '',\n            userid: ''\n          });\n          console.log('Logged out successfully');\n        }\n      });\n    \n    }catch{\n      console.log(\"error!\");\n      this.setState({\n        isLogin: false,\n        userid: ''\n      });\n      console.log('Logged out successfully');\n    }\n  }\n\n  // 로그아웃시 서버로 요청 보내서 JWT 토큰이 저장된 httponly 쿠키 제거\n  logout = () => {\n    console.log(\"logout called!\");\n    this.deleteJWTToken();\n    this.props.history.push(\"/login\");\n  }\n\n  render() {\n    const baseProps = {\n      username: this.state.username,\n      useremail: this.state.email,\n      isLogin: this.state.isLogin,\n      isMailAuthenticated:this.state.isMailAuthenticated,\n      userStateChange: this.userStateChange\n    };\n\n    console.log(\"base test.\");\n    console.log(baseProps);\n    return (   \n       <Fragment>\n          { this.state && this.state.isLogin!=null &&\n          <NavBar        \n            isLogin={this.state.isLogin}\n            username={this.state.username}\n            logout={this.logout}\n          />\n          }\n          { this.state && this.state.isLogin!=null &&\n            <Switch>\n              <AuthenticatedRoute path=\"/\" exact component={Home} props={baseProps} />\n              <NormalRoute path=\"/login\" exact component={Login} props={baseProps} />\n              <NormalRoute path=\"/signup\" exact component={Signup} props={baseProps} />\n              <MailAuthRoute path=\"/mail-resend\" exact component={MailResend} props={baseProps} />\n              <NormalRoute path=\"/mail-validation/*\" exact component={MailValidation} props={baseProps} />\n              <Route component={ErrorPage} />\n            </Switch>\n          }\n      </Fragment>\n    );\n  }\n}\n\n//export default App;\nexport default withRouter(App); //로그아웃 했을 때 로그인화면으로 리다이렉트하기 위해 바꿔준다.\n"]},"metadata":{},"sourceType":"module"}